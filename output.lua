-- Generated by Haxe 4.2.1+bf9ff69
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

function _hx_error(obj)
    if obj.value then
        _G.print("runtime error:\n " .. _hx_tostring(obj.value));
    else
        _G.print("runtime error:\n " .. tostring(obj));
    end

    if _G.debug and _G.debug.traceback then
        _G.print(debug.traceback());
    end
end


local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    res = {}
    idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
__lua_lib_lrexlib_Rex = _G.require("rex_pcre")
__lua_lib_luautf8_Utf8 = _G.require("lua-utf8")
local EReg = _hx_e()
local Lambda = _hx_e()
___Main_Main_Fields_ = _hx_e()
local Math = _hx_e()
local Pokedex = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringTools = _hx_e()
local Sys = _hx_e()
__haxe_StackItem = _hx_e()
__haxe_IMap = _hx_e()
__haxe_EntryPoint = _hx_e()
__haxe_Exception = _hx_e()
__haxe_Json = _hx_e()
__haxe_Log = _hx_e()
__haxe_MainEvent = _hx_e()
__haxe_MainLoop = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_Timer = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_ds_Either = _hx_e()
__haxe_ds_Option = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_exceptions_PosException = _hx_e()
__haxe_exceptions_NotImplementedException = _hx_e()
__haxe_http_HttpBase = _hx_e()
__haxe_io_Bytes = _hx_e()
__haxe_io_BytesBuffer = _hx_e()
__haxe_io_Input = _hx_e()
__haxe_io_Output = _hx_e()
__haxe_io_BytesOutput = _hx_e()
__haxe_io_Encoding = _hx_e()
__haxe_io_Eof = _hx_e()
__haxe_io_Error = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_Thread = _hx_e()
__lua_lib_hxluasimdjson_Json = _G.require("hxsimdjson")
__lua_lib_luasocket_Socket = _G.require("socket")
__lua_lib_luv_Misc = _G.require("luv")
__lua_lib_luv_net_Dns = _G.require("luv")
__sys_Http = _hx_e()
__sys_net_Host = _hx_e()
__sys_net_Socket = _hx_e()
__sys_net__Socket_SocketInput = _hx_e()
__sys_net__Socket_SocketOutput = _hx_e()
__tink_core__Callback_Callback_Impl_ = _hx_e()
__tink_core_LinkObject = _hx_e()
__tink_core_CallbackLinkRef = _hx_e()
__tink_core__Callback_CallbackLink_Impl_ = _hx_e()
__tink_core_SimpleLink = _hx_e()
__tink_core__Callback_LinkPair = _hx_e()
__tink_core__Callback_ListCell = _hx_e()
__tink_core_Disposable = _hx_e()
__tink_core_OwnedDisposable = _hx_e()
__tink_core_SimpleDisposable = _hx_e()
__tink_core_CallbackList = _hx_e()
__tink_core_AlreadyDisposed = _hx_e()
__tink_core_TypedError = _hx_e()
__tink_core__Error_Stack_Impl_ = _hx_e()
__tink_core__Future_FutureObject = _hx_e()
__tink_core__Future_NeverFuture = _hx_e()
__tink_core__Lazy_Computable = _hx_e()
__tink_core__Lazy_LazyObject = _hx_e()
__tink_core__Lazy_LazyConst = _hx_e()
__tink_core__Future_SyncFuture = _hx_e()
__tink_core__Future_Future_Impl_ = _hx_e()
__tink_core_FutureStatus = _hx_e()
__tink_core_FutureTrigger = _hx_e()
__tink_core__Future_SuspendableFuture = _hx_e()
__tink_core__Lazy_Lazy_Impl_ = _hx_e()
__tink_core__Lazy_LazyFunc = _hx_e()
__tink_core__Noise_Noise_Impl_ = _hx_e()
__tink_core_OptionTools = _hx_e()
__tink_core_OptionIter = _hx_e()
__tink_core_Outcome = _hx_e()
__tink_core_OutcomeTools = _hx_e()
__tink_core__Outcome_OutcomeMapper_Impl_ = _hx_e()
__tink_core__Pair_Pair_Impl_ = _hx_e()
__tink_core_MPair = _hx_e()
__tink_core__Promise_Promise_Impl_ = _hx_e()
__tink_core__Promise_Next_Impl_ = _hx_e()
__tink_core__Promise_Recover_Impl_ = _hx_e()
__tink_core__Promise_Combiner_Impl_ = _hx_e()
__tink_core__Promise_PromiseTrigger_Impl_ = _hx_e()
__tink_core__Signal_Gather_Impl_ = _hx_e()
__tink_core__Signal_Signal_Impl_ = _hx_e()
__tink_core__Signal_SignalObject = _hx_e()
__tink_core__Signal_Disposed = _hx_e()
__tink_core__Signal_Suspendable = _hx_e()
__tink_core_SignalTrigger = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do 
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do 
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do 
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

EReg.new = function(r,opt) 
  local self = _hx_new(EReg.prototype)
  EReg.super(self,r,opt)
  return self
end
EReg.super = function(self,r,opt) 
  local ropt = 0;
  local _g = 0;
  local _g1 = __lua_lib_luautf8_Utf8.len(opt);
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local _g = __lua_lib_luautf8_Utf8.sub(opt, i + 1, i + 1);
    if (_g) == "g" then 
      self.global = true;
    elseif (_g) == "i" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.CASELESS);
    elseif (_g) == "m" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.MULTILINE);
    elseif (_g) == "s" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.DOTALL);else end;
  end;
  ropt = _hx_bit.bor(ropt,EReg.FLAGS.UTF8);
  ropt = _hx_bit.bor(ropt,EReg.FLAGS.UCP);
  if (self.global == nil) then 
    self.global = false;
  end;
  self.r = __lua_lib_lrexlib_Rex.new(r, ropt);
end
EReg.__name__ = true
EReg.prototype = _hx_e();
EReg.prototype.match = function(self,s) 
  if (s == nil) then 
    do return false end;
  else
    self.m = _hx_table.pack(self.r:exec(s, 1));
    self.s = s;
    do return self.m[1] ~= nil end;
  end;
end
EReg.prototype.matched = function(self,n) 
  if ((self.m[1] == nil) or (n < 0)) then 
    _G.error(__haxe_Exception.thrown("EReg::matched"),0);
  else
    if (n == 0) then 
      local k = _G.string.sub(self.s, self.m[1], self.m[2]);
      do return k end;
    else
      if (__lua_Boot.__instanceof(self.m[3], _G.table)) then 
        local mn = 2 * (n - 1);
        if (__lua_Boot.__instanceof(self.m[3][mn + 1], Bool)) then 
          do return nil end;
        end;
        do return _G.string.sub(self.s, self.m[3][mn + 1], self.m[3][mn + 2]) end;
      else
        _G.error(__haxe_Exception.thrown("EReg:matched"),0);
      end;
    end;
  end;
end
EReg.prototype.matchedLeft = function(self) 
  if (self.m[1] == nil) then 
    _G.error(__haxe_Exception.thrown("No string matched"),0);
  end;
  do return _G.string.sub(self.s, 1, self.m[1] - 1) end
end
EReg.prototype.matchedPos = function(self) 
  local left = self:matchedLeft();
  local matched = self:matched(0);
  if (self.m[1] == nil) then 
    _G.error(__haxe_Exception.thrown("No string matched"),0);
  end;
  do return _hx_o({__fields__={pos=true,len=true},pos=__lua_lib_luautf8_Utf8.len(left),len=__lua_lib_luautf8_Utf8.len(matched)}) end
end

EReg.prototype.__class__ =  EReg

Lambda.new = {}
Lambda.__name__ = true
Lambda.exists = function(it,f) 
  local x = it:iterator();
  while (x:hasNext()) do 
    local x = x:next();
    if (f(x)) then 
      do return true end;
    end;
  end;
  do return false end;
end

___Main_Main_Fields_.new = {}
___Main_Main_Fields_.__name__ = true
___Main_Main_Fields_.main = function() 
  __haxe_Log.trace("Testing PokeAPI", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=2,className="_Main.Main_Fields_",methodName="main"}));
  local pokedex = Pokedex.new();
  pokedex:getMachineById(3):handle(function(machine) 
    __haxe_Log.trace(machine, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=6,className="_Main.Main_Fields_",methodName="main"}));
  end);
end

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Pokedex.new = function(pokedexOptions) 
  local self = _hx_new(Pokedex.prototype)
  Pokedex.super(self,pokedexOptions)
  return self
end
Pokedex.super = function(self,pokedexOptions) 
end
Pokedex.__name__ = true
Pokedex.prototype = _hx_e();
Pokedex.prototype.getMachineById = function(self,id) 
  do return __tink_core__Future_Future_Impl_.flatMap(self:loadFromUrl(Std.string("https://pokeapi.co/api/v2/") .. Std.string((Std.string("machine/") .. Std.string(id)))), function(data) 
    local result = __haxe_Json.parse(data);
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(result)) end;
  end) end
end
Pokedex.prototype.loadFromUrl = function(self,url) 
  do return __tink_core__Future_Future_Impl_.irreversible(function(handler) 
    local http = __sys_Http.new(url);
    http.onData = _hx_funcToField(handler);
    http:request();
  end) end
end

Pokedex.prototype.__class__ =  Pokedex

Reflect.new = {}
Reflect.__name__ = true
Reflect.compareMethods = function(f1,f2) 
  do return f1 == f2 end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return __lua_lib_luautf8_Utf8.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = __lua_lib_luautf8_Utf8.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return __lua_lib_luautf8_Utf8.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return __lua_lib_luautf8_Utf8.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return __lua_lib_luautf8_Utf8.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local p;
    if (str == "") then 
      p = String.indexOfEmpty(self, startIndex1 - 1);
    else
      local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex1, true);
      p = (function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )();
    end;
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(delimiter) > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(self, delimiter, idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(self)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(delimiter);
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(self, idx, __lua_lib_luautf8_Utf8.len(self)));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return __lua_lib_luautf8_Utf8.sub(self, endIndex + 1, startIndex) end;
  else
    do return __lua_lib_luautf8_Utf8.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(self)))) then 
    len = __lua_lib_luautf8_Utf8.len(self);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(self) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(self) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return __lua_lib_luautf8_Utf8.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local hexMatch = _G.string.match(x, "^[ \t\r\n]*([%-+]*0[xX][%da-fA-F]*)");
  if (hexMatch ~= nil) then 
    local sign;
    local _g = __lua_lib_luautf8_Utf8.byte(hexMatch, 1);
    if (_g) == 43 then 
      sign = 1;
    elseif (_g) == 45 then 
      sign = -1;else
    sign = 0; end;
    local pos = (function() 
      local _hx_1
      if (sign == 0) then 
      _hx_1 = 2; else 
      _hx_1 = 3; end
      return _hx_1
    end )();
    local len = nil;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(hexMatch)))) then 
      len = __lua_lib_luautf8_Utf8.len(hexMatch);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(hexMatch) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(hexMatch) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return (function() 
      local _hx_2
      if (sign == -1) then 
      _hx_2 = -1; else 
      _hx_2 = 1; end
      return _hx_2
    end )() * _G.tonumber(__lua_lib_luautf8_Utf8.sub(hexMatch, pos + 1, pos + len), 16) end;
  else
    local intMatch = _G.string.match(x, "^ *[%-+]?%d*");
    if (intMatch ~= nil) then 
      do return _G.tonumber(intMatch) end;
    else
      do return nil end;
    end;
  end;
end
Std.random = function(x) 
  if (x <= 0) then 
    do return 0 end;
  else
    do return _G.math.floor(_G.math.random() * x) end;
  end;
end

StringTools.new = {}
StringTools.__name__ = true
StringTools.urlEncode = function(s) 
  s = _G.string.gsub(s, "\n", "\r\n");
  s = _G.string.gsub(s, "([^%w %-%_%.%~])", function(c) 
    do return _G.string.format("%%%02X", Std.string(_G.string.byte(c)) .. Std.string("")) end;
  end);
  s = _G.string.gsub(s, " ", "+");
  do return s end;
end
StringTools.isSpace = function(s,pos) 
  if (((__lua_lib_luautf8_Utf8.len(s) == 0) or (pos < 0)) or (pos >= __lua_lib_luautf8_Utf8.len(s))) then 
    do return false end;
  end;
  local c = __lua_lib_luautf8_Utf8.byte(s, pos + 1);
  if (not ((c > 8) and (c < 14))) then 
    do return c == 32 end;
  else
    do return true end;
  end;
end
StringTools.ltrim = function(s) 
  local l = __lua_lib_luautf8_Utf8.len(s);
  local r = 0;
  while ((r < l) and StringTools.isSpace(s, r)) do 
    r = r + 1;
  end;
  if (r > 0) then 
    local pos = r;
    local len = l - r;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(s)))) then 
      len = __lua_lib_luautf8_Utf8.len(s);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(s) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(s) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return __lua_lib_luautf8_Utf8.sub(s, pos + 1, pos + len) end;
  else
    do return s end;
  end;
end
StringTools.rtrim = function(s) 
  local l = __lua_lib_luautf8_Utf8.len(s);
  local r = 0;
  while ((r < l) and StringTools.isSpace(s, (l - r) - 1)) do 
    r = r + 1;
  end;
  if (r > 0) then 
    local pos = 0;
    local len = l - r;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(s)))) then 
      len = __lua_lib_luautf8_Utf8.len(s);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(s) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(s) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return __lua_lib_luautf8_Utf8.sub(s, pos + 1, pos + len) end;
  else
    do return s end;
  end;
end

Sys.new = {}
Sys.__name__ = true
Sys.time = function() 
  local _hx_1_stamp_seconds, _hx_1_stamp_microseconds = __lua_lib_luv_Misc.gettimeofday();
  do return _hx_1_stamp_seconds + (_hx_1_stamp_microseconds / 1000000) end;
end
_hxClasses["haxe.StackItem"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="CFunction","Module","FilePos","Method","LocalFunction"},5)}
__haxe_StackItem = _hxClasses["haxe.StackItem"];
__haxe_StackItem.CFunction = _hx_tab_array({[0]="CFunction",0,__enum__ = __haxe_StackItem},2)

__haxe_StackItem.Module = function(m) local _x = _hx_tab_array({[0]="Module",1,m,__enum__=__haxe_StackItem}, 3); return _x; end 
__haxe_StackItem.FilePos = function(s,file,line,column) local _x = _hx_tab_array({[0]="FilePos",2,s,file,line,column,__enum__=__haxe_StackItem}, 6); return _x; end 
__haxe_StackItem.Method = function(classname,method) local _x = _hx_tab_array({[0]="Method",3,classname,method,__enum__=__haxe_StackItem}, 4); return _x; end 
__haxe_StackItem.LocalFunction = function(v) local _x = _hx_tab_array({[0]="LocalFunction",4,v,__enum__=__haxe_StackItem}, 3); return _x; end 

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true

__haxe_EntryPoint.new = {}
__haxe_EntryPoint.__name__ = true
__haxe_EntryPoint.processEvents = function() 
  while (true) do 
    local f = __haxe_EntryPoint.pending:shift();
    if (f == nil) then 
      break;
    end;
    f();
  end;
  local time = __haxe_MainLoop.tick();
  if (not __haxe_MainLoop.hasEvents() and (__haxe_EntryPoint.threadCount == 0)) then 
    do return -1 end;
  end;
  do return time end;
end
__haxe_EntryPoint.run = function() 
  while (true) do 
    local nextTick = __haxe_EntryPoint.processEvents();
    if (nextTick < 0) then 
      break;
    end;
    local tmp = nextTick > 0;
  end;
end

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.caught = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value end;
  else
    do return __haxe_ValueException.new(value, nil, value) end;
  end;
end
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.unwrap = function(self) 
  do return self.__nativeException end
end
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_Json.new = {}
__haxe_Json.__name__ = true
__haxe_Json.parse = function(text) 
  do return __lua_lib_hxluasimdjson_Json.parse(text) end;
end

__haxe_Log.new = {}
__haxe_Log.__name__ = true
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_MainEvent.new = function(f,p) 
  local self = _hx_new(__haxe_MainEvent.prototype)
  __haxe_MainEvent.super(self,f,p)
  return self
end
__haxe_MainEvent.super = function(self,f,p) 
  self.isBlocking = true;
  self.f = _hx_funcToField(f);
  self.priority = p;
  self.nextRun = -_G.math.huge;
end
__haxe_MainEvent.__name__ = true
__haxe_MainEvent.prototype = _hx_e();
__haxe_MainEvent.prototype.delay = function(self,t) 
  self.nextRun = (function() 
    local _hx_1
    if (t == nil) then 
    _hx_1 = -_G.math.huge; else 
    _hx_1 = Sys.time() + t; end
    return _hx_1
  end )();
end
__haxe_MainEvent.prototype.stop = function(self) 
  if (self.f == nil) then 
    do return end;
  end;
  self.f = nil;
  self.nextRun = -_G.math.huge;
  if (self.prev == nil) then 
    __haxe_MainLoop.pending = self.next;
  else
    self.prev.next = self.next;
  end;
  if (self.next ~= nil) then 
    self.next.prev = self.prev;
  end;
end

__haxe_MainEvent.prototype.__class__ =  __haxe_MainEvent

__haxe_MainLoop.new = {}
__haxe_MainLoop.__name__ = true
__haxe_MainLoop.hasEvents = function() 
  local p = __haxe_MainLoop.pending;
  while (p ~= nil) do 
    if (p.isBlocking) then 
      do return true end;
    end;
    p = p.next;
  end;
  do return false end;
end
__haxe_MainLoop.add = function(f,priority) 
  if (priority == nil) then 
    priority = 0;
  end;
  if (f == nil) then 
    _G.error(__haxe_Exception.thrown("Event function is null"),0);
  end;
  local e = __haxe_MainEvent.new(f, priority);
  local head = __haxe_MainLoop.pending;
  if (head ~= nil) then 
    head.prev = e;
  end;
  e.next = head;
  __haxe_MainLoop.pending = e;
  __haxe_MainLoop.injectIntoEventLoop(0);
  do return e end;
end
__haxe_MainLoop.injectIntoEventLoop = function(waitMs) 
end
__haxe_MainLoop.sortEvents = function() 
  local list = __haxe_MainLoop.pending;
  if (list == nil) then 
    do return end;
  end;
  local insize = 1;
  local nmerges;
  local psize = 0;
  local qsize = 0;
  local p;
  local q;
  local e;
  local tail;
  while (true) do 
    p = list;
    list = nil;
    tail = nil;
    nmerges = 0;
    while (p ~= nil) do 
      nmerges = nmerges + 1;
      q = p;
      psize = 0;
      local _g = 0;
      local _g1 = insize;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        psize = psize + 1;
        q = q.next;
        if (q == nil) then 
          break;
        end;
      end;
      qsize = insize;
      while ((psize > 0) or ((qsize > 0) and (q ~= nil))) do 
        if (psize == 0) then 
          e = q;
          q = q.next;
          qsize = qsize - 1;
        else
          if (((qsize == 0) or (q == nil)) or ((p.priority > q.priority) or ((p.priority == q.priority) and (p.nextRun <= q.nextRun)))) then 
            e = p;
            p = p.next;
            psize = psize - 1;
          else
            e = q;
            q = q.next;
            qsize = qsize - 1;
          end;
        end;
        if (tail ~= nil) then 
          tail.next = e;
        else
          list = e;
        end;
        e.prev = tail;
        tail = e;
      end;
      p = q;
    end;
    tail.next = nil;
    if (nmerges <= 1) then 
      break;
    end;
    insize = insize * 2;
  end;
  list.prev = nil;
  __haxe_MainLoop.pending = list;
end
__haxe_MainLoop.tick = function() 
  __haxe_MainLoop.sortEvents();
  local e = __haxe_MainLoop.pending;
  local now = Sys.time();
  local wait = 1e9;
  while (e ~= nil) do 
    local next = e.next;
    local wt = e.nextRun - now;
    if (wt <= 0) then 
      wait = 0;
      if (e.f ~= nil) then 
        e:f();
      end;
    else
      if (wait > wt) then 
        wait = wt;
      end;
    end;
    e = next;
  end;
  do return wait end;
end

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (__lua_lib_luautf8_Utf8.len("\n") > 0) then 
        newidx = __lua_lib_luautf8_Utf8.find(s, "\n", idx, true);
      else
        if (idx >= __lua_lib_luautf8_Utf8.len(s)) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = __lua_lib_luautf8_Utf8.sub(s, idx, newidx - 1);
        ret:push(match);
        idx = newidx + __lua_lib_luautf8_Utf8.len("\n");
      else
        ret:push(__lua_lib_luautf8_Utf8.sub(s, idx, __lua_lib_luautf8_Utf8.len(s)));
        idx = nil;
      end;
    end;
    do return ret:slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_Timer.new = function(time_ms) 
  local self = _hx_new(__haxe_Timer.prototype)
  __haxe_Timer.super(self,time_ms)
  return self
end
__haxe_Timer.super = function(self,time_ms) 
  local _gthis = self;
  local dt = time_ms / 1000;
  self.event = __haxe_MainLoop.add(function() 
    local fh = _gthis.event;
    fh.nextRun = fh.nextRun + dt;
    _gthis:run();
  end);
  self.event:delay(dt);
end
__haxe_Timer.__name__ = true
__haxe_Timer.delay = function(f,time_ms) 
  local t = __haxe_Timer.new(time_ms);
  t.run = function(self) 
    t:stop();
    f();
   end;
  do return t end;
end
__haxe_Timer.prototype = _hx_e();
__haxe_Timer.prototype.stop = function(self) 
  if (self.event ~= nil) then 
    self.event:stop();
    self.event = nil;
  end;
end
__haxe_Timer.prototype.run = function(self) 
end

__haxe_Timer.prototype.__class__ =  __haxe_Timer

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,Std.string(value),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();
__haxe_ValueException.prototype.unwrap = function(self) 
  do return self.value end
end

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})
_hxClasses["haxe.ds.Either"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Left","Right"},2)}
__haxe_ds_Either = _hxClasses["haxe.ds.Either"];
__haxe_ds_Either.Left = function(v) local _x = _hx_tab_array({[0]="Left",0,v,__enum__=__haxe_ds_Either}, 3); return _x; end 
__haxe_ds_Either.Right = function(v) local _x = _hx_tab_array({[0]="Right",1,v,__enum__=__haxe_ds_Either}, 3); return _x; end 
_hxClasses["haxe.ds.Option"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Some","None"},2)}
__haxe_ds_Option = _hxClasses["haxe.ds.Option"];
__haxe_ds_Option.Some = function(v) local _x = _hx_tab_array({[0]="Some",0,v,__enum__=__haxe_ds_Option}, 3); return _x; end 
__haxe_ds_Option.None = _hx_tab_array({[0]="None",1,__enum__ = __haxe_ds_Option},2)


__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
end
__haxe_exceptions_PosException.__name__ = true
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(__haxe_Exception.prototype.toString(self))) .. Std.string(" in ")) .. Std.string(self.posInfos.className)) .. Std.string(".")) .. Std.string(self.posInfos.methodName)) .. Std.string(" at ")) .. Std.string(self.posInfos.fileName)) .. Std.string(":")) .. Std.string(self.posInfos.lineNumber) end
end

__haxe_exceptions_PosException.prototype.__class__ =  __haxe_exceptions_PosException
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
end
__haxe_exceptions_NotImplementedException.__name__ = true
__haxe_exceptions_NotImplementedException.prototype = _hx_e();

__haxe_exceptions_NotImplementedException.prototype.__class__ =  __haxe_exceptions_NotImplementedException
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})

__haxe_http_HttpBase.new = function(url) 
  local self = _hx_new(__haxe_http_HttpBase.prototype)
  __haxe_http_HttpBase.super(self,url)
  return self
end
__haxe_http_HttpBase.super = function(self,url) 
  self.url = url;
  self.headers = _hx_tab_array({}, 0);
  self.params = _hx_tab_array({}, 0);
  self.emptyOnData = _hx_funcToField(_hx_bind(self,self.onData));
end
__haxe_http_HttpBase.__name__ = true
__haxe_http_HttpBase.prototype = _hx_e();
__haxe_http_HttpBase.prototype.onData = function(self,data) 
end
__haxe_http_HttpBase.prototype.onBytes = function(self,data) 
end
__haxe_http_HttpBase.prototype.onError = function(self,msg) 
end
__haxe_http_HttpBase.prototype.onStatus = function(self,status) 
end
__haxe_http_HttpBase.prototype.hasOnData = function(self) 
  do return not Reflect.compareMethods(_hx_bind(self,self.onData), _hx_bind(self,self.emptyOnData)) end
end
__haxe_http_HttpBase.prototype.success = function(self,data) 
  self.responseBytes = data;
  self.responseAsString = nil;
  if (self:hasOnData()) then 
    self:onData(self:get_responseData());
  end;
  self:onBytes(self.responseBytes);
end
__haxe_http_HttpBase.prototype.get_responseData = function(self) 
  if ((self.responseAsString == nil) and (self.responseBytes ~= nil)) then 
    self.responseAsString = self.responseBytes:getString(0, self.responseBytes.length, __haxe_io_Encoding.UTF8);
  end;
  do return self.responseAsString end
end

__haxe_http_HttpBase.prototype.__class__ =  __haxe_http_HttpBase

__haxe_io_Bytes.new = function(length,b) 
  local self = _hx_new(__haxe_io_Bytes.prototype)
  __haxe_io_Bytes.super(self,length,b)
  return self
end
__haxe_io_Bytes.super = function(self,length,b) 
  self.length = length;
  self.b = b;
end
__haxe_io_Bytes.__name__ = true
__haxe_io_Bytes.alloc = function(length) 
  local a = Array.new();
  local _g = 0;
  local _g1 = length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    a:push(0);
  end;
  do return __haxe_io_Bytes.new(length, a) end;
end
__haxe_io_Bytes.ofString = function(s,encoding) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = _G.string.len(s);
  while (_g1 < _g2) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    _g:push(_G.string.byte(s, i + 1));
  end;
  local bytes = _g;
  do return __haxe_io_Bytes.new(bytes.length, bytes) end;
end
__haxe_io_Bytes.prototype = _hx_e();
__haxe_io_Bytes.prototype.sub = function(self,pos,len) 
  if (((pos < 0) or (len < 0)) or ((pos + len) > self.length)) then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
  end;
  do return __haxe_io_Bytes.new(len, self.b:slice(pos, pos + len)) end
end
__haxe_io_Bytes.prototype.getString = function(self,pos,len,encoding) 
  local tmp = encoding == nil;
  if (((pos < 0) or (len < 0)) or ((pos + len) > self.length)) then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
  end;
  if ((self.b.length - pos) <= __lua_Boot.MAXSTACKSIZE) then 
    local _end = Math.min(self.b.length, pos + len) - 1;
    do return _G.string.char(_hx_table.unpack(self.b, pos, _end)) end;
  else
    local tbl = ({});
    local _g = pos;
    local _g1 = pos + len;
    while (_g < _g1) do 
      _g = _g + 1;
      local idx = _g - 1;
      _G.table.insert(tbl, _G.string.char(self.b[idx]));
    end;
    do return _G.table.concat(tbl, "") end;
  end;
end
__haxe_io_Bytes.prototype.toString = function(self) 
  do return self:getString(0, self.length) end
end

__haxe_io_Bytes.prototype.__class__ =  __haxe_io_Bytes

__haxe_io_BytesBuffer.new = function() 
  local self = _hx_new(__haxe_io_BytesBuffer.prototype)
  __haxe_io_BytesBuffer.super(self)
  return self
end
__haxe_io_BytesBuffer.super = function(self) 
  self.b = Array.new();
end
__haxe_io_BytesBuffer.__name__ = true
__haxe_io_BytesBuffer.prototype = _hx_e();
__haxe_io_BytesBuffer.prototype.getBytes = function(self) 
  local bytes = __haxe_io_Bytes.new(self.b.length, self.b);
  self.b = nil;
  do return bytes end
end

__haxe_io_BytesBuffer.prototype.__class__ =  __haxe_io_BytesBuffer

__haxe_io_Input.new = {}
__haxe_io_Input.__name__ = true
__haxe_io_Input.prototype = _hx_e();
__haxe_io_Input.prototype.readByte = function(self) 
  _G.error(__haxe_exceptions_NotImplementedException.new(nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="haxe/io/Input.hx",lineNumber=53,className="haxe.io.Input",methodName="readByte"})),0);
end
__haxe_io_Input.prototype.readBytes = function(self,s,pos,len) 
  local k = len;
  local b = s.b;
  if (((pos < 0) or (len < 0)) or ((pos + len) > s.length)) then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
  end;
  local _hx_status, _hx_result = pcall(function() 
  
      while (k > 0) do 
        b[pos] = self:readByte();
        pos = pos + 1;
        k = k - 1;
      end;
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    if (not __lua_Boot.__instanceof(__haxe_Exception.caught(_g):unwrap(), __haxe_io_Eof)) then 
      _G.error(_g,0);
    end;
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
  do return len - k end
end

__haxe_io_Input.prototype.__class__ =  __haxe_io_Input

__haxe_io_Output.new = {}
__haxe_io_Output.__name__ = true
__haxe_io_Output.prototype = _hx_e();
__haxe_io_Output.prototype.writeByte = function(self,c) 
  _G.error(__haxe_exceptions_NotImplementedException.new(nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="haxe/io/Output.hx",lineNumber=47,className="haxe.io.Output",methodName="writeByte"})),0);
end
__haxe_io_Output.prototype.writeBytes = function(self,s,pos,len) 
  if (((pos < 0) or (len < 0)) or ((pos + len) > s.length)) then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
  end;
  local b = s.b;
  local k = len;
  while (k > 0) do 
    self:writeByte(b[pos]);
    pos = pos + 1;
    k = k - 1;
  end;
  do return len end
end
__haxe_io_Output.prototype.close = function(self) 
end
__haxe_io_Output.prototype.writeFullBytes = function(self,s,pos,len) 
  while (len > 0) do 
    local k = self:writeBytes(s, pos, len);
    pos = pos + k;
    len = len - k;
  end;
end
__haxe_io_Output.prototype.prepare = function(self,nbytes) 
end
__haxe_io_Output.prototype.writeString = function(self,s,encoding) 
  local b = __haxe_io_Bytes.ofString(s, encoding);
  self:writeFullBytes(b, 0, b.length);
end

__haxe_io_Output.prototype.__class__ =  __haxe_io_Output

__haxe_io_BytesOutput.new = function() 
  local self = _hx_new(__haxe_io_BytesOutput.prototype)
  __haxe_io_BytesOutput.super(self)
  return self
end
__haxe_io_BytesOutput.super = function(self) 
  self.b = __haxe_io_BytesBuffer.new();
end
__haxe_io_BytesOutput.__name__ = true
__haxe_io_BytesOutput.prototype = _hx_e();
__haxe_io_BytesOutput.prototype.writeByte = function(self,c) 
  self.b.b:push(c);
end
__haxe_io_BytesOutput.prototype.writeBytes = function(self,buf,pos,len) 
  local _this = self.b;
  if (((pos < 0) or (len < 0)) or ((pos + len) > buf.length)) then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
  end;
  local b1 = _this.b;
  local b2 = buf.b;
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    _this.b:push(b2[i]);
  end;
  do return len end
end
__haxe_io_BytesOutput.prototype.getBytes = function(self) 
  do return self.b:getBytes() end
end

__haxe_io_BytesOutput.prototype.__class__ =  __haxe_io_BytesOutput
__haxe_io_BytesOutput.__super__ = __haxe_io_Output
setmetatable(__haxe_io_BytesOutput.prototype,{__index=__haxe_io_Output.prototype})
_hxClasses["haxe.io.Encoding"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="UTF8","RawNative"},2)}
__haxe_io_Encoding = _hxClasses["haxe.io.Encoding"];
__haxe_io_Encoding.UTF8 = _hx_tab_array({[0]="UTF8",0,__enum__ = __haxe_io_Encoding},2)

__haxe_io_Encoding.RawNative = _hx_tab_array({[0]="RawNative",1,__enum__ = __haxe_io_Encoding},2)


__haxe_io_Eof.new = function() 
  local self = _hx_new(__haxe_io_Eof.prototype)
  __haxe_io_Eof.super(self)
  return self
end
__haxe_io_Eof.super = function(self) 
end
__haxe_io_Eof.__name__ = true
__haxe_io_Eof.prototype = _hx_e();
__haxe_io_Eof.prototype.toString = function(self) 
  do return "Eof" end
end

__haxe_io_Eof.prototype.__class__ =  __haxe_io_Eof
_hxClasses["haxe.io.Error"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Blocked","Overflow","OutsideBounds","Custom"},4)}
__haxe_io_Error = _hxClasses["haxe.io.Error"];
__haxe_io_Error.Blocked = _hx_tab_array({[0]="Blocked",0,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.Overflow = _hx_tab_array({[0]="Overflow",1,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.OutsideBounds = _hx_tab_array({[0]="OutsideBounds",2,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.Custom = function(e) local _x = _hx_tab_array({[0]="Custom",3,e,__enum__=__haxe_io_Error}, 3); return _x; end 

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do 
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__sys_Http.new = function(url) 
  local self = _hx_new(__sys_Http.prototype)
  __sys_Http.super(self,url)
  return self
end
__sys_Http.super = function(self,url) 
  self.cnxTimeout = 10;
  __haxe_http_HttpBase.super(self,url);
end
__sys_Http.__name__ = true
__sys_Http.prototype = _hx_e();
__sys_Http.prototype.request = function(self,post) 
  local _gthis = self;
  local output = __haxe_io_BytesOutput.new();
  local old = _hx_bind(self,self.onError);
  local err = false;
  self.onError = function(self,e) 
    _gthis.responseBytes = output:getBytes();
    err = true;
    _gthis.onError = _hx_funcToField(old);
    _gthis:onError(e);
   end;
  post = (post or (self.postBytes ~= nil)) or (self.postData ~= nil);
  self:customRequest(post, output);
  if (not err) then 
    self:success(output:getBytes());
  end;
end
__sys_Http.prototype.customRequest = function(self,post,api,sock,method) 
  self.responseAsString = nil;
  self.responseBytes = nil;
  local url_regexp = EReg.new("^(https?://)?([a-zA-Z\\.0-9_-]+)(:[0-9]+)?(.*)$", "");
  if (not url_regexp:match(self.url)) then 
    self:onError("Invalid URL");
    do return end;
  end;
  local secure = url_regexp:matched(1) == "https://";
  if (sock == nil) then 
    if (secure) then 
      _G.error(__haxe_exceptions_NotImplementedException.new("Https support in haxe.Http is not implemented for this target", nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="sys/Http.hx",lineNumber=112,className="sys.Http",methodName="customRequest"})),0);
    else
      sock = __sys_net_Socket.new();
    end;
    local timeout = self.cnxTimeout;
    sock.timeout = timeout;
    if (sock._socket ~= nil) then 
      local client = sock._socket;
      client:settimeout(timeout);
    end;
  end;
  local host = url_regexp:matched(2);
  local portString = url_regexp:matched(3);
  local request = url_regexp:matched(4);
  if (__lua_lib_luautf8_Utf8.sub(request, 1, 1) ~= "/") then 
    request = Std.string("/") .. Std.string(request);
  end;
  local port;
  if ((portString == nil) or (portString == "")) then 
    port = (function() 
      local _hx_1
      if (secure) then 
      _hx_1 = 443; else 
      _hx_1 = 80; end
      return _hx_1
    end )();
  else
    local pos = 1;
    local len = __lua_lib_luautf8_Utf8.len(portString) - 1;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(portString)))) then 
      len = __lua_lib_luautf8_Utf8.len(portString);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(portString) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(portString) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    port = Std.parseInt(__lua_lib_luautf8_Utf8.sub(portString, pos + 1, pos + len));
  end;
  local multipart = self.file ~= nil;
  local boundary = nil;
  local uri = nil;
  if (multipart) then 
    post = true;
    boundary = Std.string(Std.string(Std.string(Std.string(Std.random(1000))) .. Std.string(Std.string(Std.random(1000)))) .. Std.string(Std.string(Std.random(1000)))) .. Std.string(Std.string(Std.random(1000)));
    while (__lua_lib_luautf8_Utf8.len(boundary) < 38) do 
      boundary = Std.string("-") .. Std.string(boundary);
    end;
    local b_b = ({});
    local b_length = 0;
    local _g = 0;
    local _g1 = self.params;
    while (_g < _g1.length) do 
      local p = _g1[_g];
      _g = _g + 1;
      local str = "--";
      _G.table.insert(b_b, str);
      b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
      local str = Std.string(boundary);
      _G.table.insert(b_b, str);
      b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
      local str = "\r\n";
      _G.table.insert(b_b, str);
      b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
      local str = "Content-Disposition: form-data; name=\"";
      _G.table.insert(b_b, str);
      b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
      local str = Std.string(p.name);
      _G.table.insert(b_b, str);
      b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
      local str = "\"";
      _G.table.insert(b_b, str);
      b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
      local str = "\r\n";
      _G.table.insert(b_b, str);
      b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
      local str = "\r\n";
      _G.table.insert(b_b, str);
      b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
      local str = Std.string(p.value);
      _G.table.insert(b_b, str);
      b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
      local str = "\r\n";
      _G.table.insert(b_b, str);
      b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    end;
    local str = "--";
    _G.table.insert(b_b, str);
    b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    local str = Std.string(boundary);
    _G.table.insert(b_b, str);
    b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    local str = "\r\n";
    _G.table.insert(b_b, str);
    b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    local str = "Content-Disposition: form-data; name=\"";
    _G.table.insert(b_b, str);
    b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    local str = Std.string(self.file.param);
    _G.table.insert(b_b, str);
    b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    local str = "\"; filename=\"";
    _G.table.insert(b_b, str);
    b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    local str = Std.string(self.file.filename);
    _G.table.insert(b_b, str);
    b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    local str = "\"";
    _G.table.insert(b_b, str);
    b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    local str = "\r\n";
    _G.table.insert(b_b, str);
    b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    local str = Std.string(Std.string(Std.string(Std.string("Content-Type: ") .. Std.string(self.file.mimeType)) .. Std.string("\r\n")) .. Std.string("\r\n"));
    _G.table.insert(b_b, str);
    b_length = b_length + __lua_lib_luautf8_Utf8.len(str);
    uri = _G.table.concat(b_b);
  else
    local _g = 0;
    local _g1 = self.params;
    while (_g < _g1.length) do 
      local p = _g1[_g];
      _g = _g + 1;
      if (uri == nil) then 
        uri = "";
      else
        uri = Std.string(uri) .. Std.string("&");
      end;
      uri = Std.string(uri) .. Std.string((Std.string(Std.string(StringTools.urlEncode(p.name)) .. Std.string("=")) .. Std.string(StringTools.urlEncode(Std.string("") .. Std.string(p.value)))));
    end;
  end;
  local b = __haxe_io_BytesOutput.new();
  if (method ~= nil) then 
    b:writeString(method);
    b:writeString(" ");
  else
    if (post) then 
      b:writeString("POST ");
    else
      b:writeString("GET ");
    end;
  end;
  if (__sys_Http.PROXY ~= nil) then 
    b:writeString("http://");
    b:writeString(host);
    if (port ~= 80) then 
      b:writeString(":");
      b:writeString(Std.string("") .. Std.string(port));
    end;
  end;
  b:writeString(request);
  if (not post and (uri ~= nil)) then 
    local startIndex = 0;
    if (startIndex == nil) then 
      startIndex = 1;
    else
      startIndex = startIndex + 1;
    end;
    local r = __lua_lib_luautf8_Utf8.find(request, "?", startIndex, true);
    if ((function() 
      local _hx_2
      if ((r ~= nil) and (r > 0)) then 
      _hx_2 = r - 1; else 
      _hx_2 = -1; end
      return _hx_2
    end )() >= 0) then 
      b:writeString("&");
    else
      b:writeString("?");
    end;
    b:writeString(uri);
  end;
  b:writeString(Std.string(Std.string(" HTTP/1.1\r\nHost: ") .. Std.string(host)) .. Std.string("\r\n"));
  if (self.postData ~= nil) then 
    self.postBytes = __haxe_io_Bytes.ofString(self.postData);
    self.postData = nil;
  end;
  if (self.postBytes ~= nil) then 
    b:writeString(Std.string(Std.string("Content-Length: ") .. Std.string(self.postBytes.length)) .. Std.string("\r\n"));
  else
    if (post and (uri ~= nil)) then 
      if (multipart or not Lambda.exists(self.headers, function(h) 
        do return h.name == "Content-Type" end;
      end)) then 
        b:writeString("Content-Type: ");
        if (multipart) then 
          b:writeString("multipart/form-data");
          b:writeString("; boundary=");
          b:writeString(boundary);
        else
          b:writeString("application/x-www-form-urlencoded");
        end;
        b:writeString("\r\n");
      end;
      if (multipart) then 
        b:writeString(Std.string(Std.string("Content-Length: ") .. Std.string((((__lua_lib_luautf8_Utf8.len(uri) + self.file.size) + __lua_lib_luautf8_Utf8.len(boundary)) + 6))) .. Std.string("\r\n"));
      else
        b:writeString(Std.string(Std.string("Content-Length: ") .. Std.string(__lua_lib_luautf8_Utf8.len(uri))) .. Std.string("\r\n"));
      end;
    end;
  end;
  b:writeString("Connection: close\r\n");
  local _g = 0;
  local _g1 = self.headers;
  while (_g < _g1.length) do 
    local h = _g1[_g];
    _g = _g + 1;
    b:writeString(h.name);
    b:writeString(": ");
    b:writeString(h.value);
    b:writeString("\r\n");
  end;
  b:writeString("\r\n");
  if (self.postBytes ~= nil) then 
    b:writeFullBytes(self.postBytes, 0, self.postBytes.length);
  else
    if (post and (uri ~= nil)) then 
      b:writeString(uri);
    end;
  end;
  local _hx_status, _hx_result = pcall(function() 
  
      if (__sys_Http.PROXY ~= nil) then 
        sock:connect(__sys_net_Host.new(__sys_Http.PROXY.host), __sys_Http.PROXY.port);
      else
        sock:connect(__sys_net_Host.new(host), port);
      end;
      if (multipart) then 
        self:writeBody(b, self.file.io, self.file.size, boundary, sock);
      else
        self:writeBody(b, nil, 0, nil, sock);
      end;
      self:readHttpResponse(api, sock);
      sock:close();
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    local e = __haxe_Exception.caught(_g):unwrap();
    local _hx_status, _hx_result = pcall(function() 
    
        sock:close();
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
    self:onError(Std.string(e));
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
end
__sys_Http.prototype.writeBody = function(self,body,fileInput,fileSize,boundary,sock) 
  if (body ~= nil) then 
    local bytes = body:getBytes();
    sock.output:writeFullBytes(bytes, 0, bytes.length);
  end;
  if (boundary ~= nil) then 
    local bufsize = 4096;
    local buf = __haxe_io_Bytes.alloc(bufsize);
    while (fileSize > 0) do 
      local size = (function() 
        local _hx_1
        if (fileSize > bufsize) then 
        _hx_1 = bufsize; else 
        _hx_1 = fileSize; end
        return _hx_1
      end )();
      local len = 0;
      local _hx_status, _hx_result = pcall(function() 
      
          len = fileInput:readBytes(buf, 0, size);
        return _hx_pcall_default
      end)
      if not _hx_status and _hx_result == "_hx_pcall_break" then
        break
      elseif not _hx_status then 
        local _g = _hx_result;
        if (__lua_Boot.__instanceof(__haxe_Exception.caught(_g):unwrap(), __haxe_io_Eof)) then 
          break;
        else
          _G.error(_g,0);
        end;
      elseif _hx_result ~= _hx_pcall_default then
        return _hx_result
      end;
      sock.output:writeFullBytes(buf, 0, len);
      fileSize = fileSize - len;
    end;
    sock.output:writeString("\r\n");
    sock.output:writeString("--");
    sock.output:writeString(boundary);
    sock.output:writeString("--");
  end;
end
__sys_Http.prototype.readHttpResponse = function(self,api,sock) 
  local b = __haxe_io_BytesBuffer.new();
  local k = 4;
  local s = __haxe_io_Bytes.alloc(4);
  local timeout = self.cnxTimeout;
  sock.timeout = timeout;
  if (sock._socket ~= nil) then 
    local client = sock._socket;
    client:settimeout(timeout);
  end;
  local _hx_continue_1 = false;
  while (true) do repeat 
    local p = sock.input:readBytes(s, 0, k);
    while (p ~= k) do 
      p = p + sock.input:readBytes(s, p, k - p);
    end;
    if ((k < 0) or (k > s.length)) then 
      _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
    end;
    local b1 = b.b;
    local b2 = s.b;
    local _g = 0;
    local _g1 = k;
    while (_g < _g1) do 
      _g = _g + 1;
      local i = _g - 1;
      b.b:push(b2[i]);
    end;
    local k1 = k;
    if (k1) == 1 then 
      local c = s.b[0];
      if (c == 10) then 
        _hx_continue_1 = true;break;
      end;
      if (c == 13) then 
        k = 3;
      else
        k = 4;
      end;
    elseif (k1) == 2 then 
      local c = s.b[1];
      if (c == 10) then 
        if (s.b[0] == 13) then 
          _hx_continue_1 = true;break;
        end;
        k = 4;
      else
        if (c == 13) then 
          k = 3;
        else
          k = 4;
        end;
      end;
    elseif (k1) == 3 then 
      local c = s.b[2];
      if (c == 10) then 
        if (s.b[1] ~= 13) then 
          k = 4;
        else
          if (s.b[0] ~= 10) then 
            k = 2;
          else
            _hx_continue_1 = true;break;
          end;
        end;
      else
        if (c == 13) then 
          if ((s.b[1] ~= 10) or (s.b[0] ~= 13)) then 
            k = 1;
          else
            k = 3;
          end;
        else
          k = 4;
        end;
      end;
    elseif (k1) == 4 then 
      local c = s.b[3];
      if (c == 10) then 
        if (s.b[2] ~= 13) then 
          break;
        else
          if ((s.b[1] ~= 10) or (s.b[0] ~= 13)) then 
            k = 2;
          else
            _hx_continue_1 = true;break;
          end;
        end;
      else
        if (c == 13) then 
          if ((s.b[2] ~= 10) or (s.b[1] ~= 13)) then 
            k = 3;
          else
            k = 1;
          end;
        end;
      end; end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  local _this = b:getBytes():toString();
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len("\r\n") > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(_this, "\r\n", idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(_this)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(_this, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len("\r\n");
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(_this, idx, __lua_lib_luautf8_Utf8.len(_this)));
      idx = nil;
    end;
  end;
  local headers = ret;
  local response = headers:shift();
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(" ") > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(response, " ", idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(response)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(response, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(" ");
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(response, idx, __lua_lib_luautf8_Utf8.len(response)));
      idx = nil;
    end;
  end;
  local rp = ret;
  local status = Std.parseInt(rp[1]);
  if ((status == 0) or (status == nil)) then 
    _G.error(__haxe_Exception.thrown("Response status error"),0);
  end;
  headers:pop();
  headers:pop();
  self.responseHeaders = __haxe_ds_StringMap.new();
  local size = nil;
  local chunked = false;
  local _g = 0;
  while (_g < headers.length) do 
    local hline = headers[_g];
    _g = _g + 1;
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (__lua_lib_luautf8_Utf8.len(": ") > 0) then 
        newidx = __lua_lib_luautf8_Utf8.find(hline, ": ", idx, true);
      else
        if (idx >= __lua_lib_luautf8_Utf8.len(hline)) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = __lua_lib_luautf8_Utf8.sub(hline, idx, newidx - 1);
        ret:push(match);
        idx = newidx + __lua_lib_luautf8_Utf8.len(": ");
      else
        ret:push(__lua_lib_luautf8_Utf8.sub(hline, idx, __lua_lib_luautf8_Utf8.len(hline)));
        idx = nil;
      end;
    end;
    local a = ret;
    local hname = a:shift();
    local hval = (function() 
      local _hx_1
      if (a.length == 1) then 
      _hx_1 = a[0]; else 
      _hx_1 = a:join(": "); end
      return _hx_1
    end )();
    hval = StringTools.ltrim(StringTools.rtrim(hval));
    local _this = self.responseHeaders;
    if (hval == nil) then 
      _this.h[hname] = __haxe_ds_StringMap.tnull;
    else
      _this.h[hname] = hval;
    end;
    local _g = __lua_lib_luautf8_Utf8.lower(hname);
    if (_g) == "content-length" then 
      size = Std.parseInt(hval);
    elseif (_g) == "transfer-encoding" then 
      chunked = __lua_lib_luautf8_Utf8.lower(hval) == "chunked"; end;
  end;
  self:onStatus(status);
  local chunk_re = EReg.new("^([0-9A-Fa-f]+)[ ]*\r\n", "m");
  self.chunk_size = nil;
  self.chunk_buf = nil;
  local bufsize = 1024;
  local buf = __haxe_io_Bytes.alloc(bufsize);
  if (chunked) then 
    local _hx_status, _hx_result = pcall(function() 
    
        while (true) do 
          local len = sock.input:readBytes(buf, 0, bufsize);
          if (not self:readChunk(chunk_re, api, buf, len)) then 
            break;
          end;
        end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      if (__lua_Boot.__instanceof(__haxe_Exception.caught(_g):unwrap(), __haxe_io_Eof)) then 
        _G.error(__haxe_Exception.thrown("Transfer aborted"),0);
      else
        _G.error(_g,0);
      end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  else
    if (size == nil) then 
      if (not self.noShutdown) then 
        sock:shutdown(false, true);
      end;
      local _hx_status, _hx_result = pcall(function() 
      
          while (true) do 
            local len = sock.input:readBytes(buf, 0, bufsize);
            if (len == 0) then 
              break;
            end;
            api:writeBytes(buf, 0, len);
          end;
        return _hx_pcall_default
      end)
      if not _hx_status and _hx_result == "_hx_pcall_break" then
      elseif not _hx_status then 
        local _g = _hx_result;
        if (not __lua_Boot.__instanceof(__haxe_Exception.caught(_g):unwrap(), __haxe_io_Eof)) then 
          _G.error(_g,0);
        end;
      elseif _hx_result ~= _hx_pcall_default then
        return _hx_result
      end;
    else
      api:prepare(size);
      local _hx_status, _hx_result = pcall(function() 
      
          while (size > 0) do 
            local len = sock.input:readBytes(buf, 0, (function() 
              local _hx_2
              if (size > bufsize) then 
              _hx_2 = bufsize; else 
              _hx_2 = size; end
              return _hx_2
            end )());
            api:writeBytes(buf, 0, len);
            size = size - len;
          end;
        return _hx_pcall_default
      end)
      if not _hx_status and _hx_result == "_hx_pcall_break" then
      elseif not _hx_status then 
        local _g = _hx_result;
        if (__lua_Boot.__instanceof(__haxe_Exception.caught(_g):unwrap(), __haxe_io_Eof)) then 
          _G.error(__haxe_Exception.thrown("Transfer aborted"),0);
        else
          _G.error(_g,0);
        end;
      elseif _hx_result ~= _hx_pcall_default then
        return _hx_result
      end;
    end;
  end;
  if (chunked and ((self.chunk_size ~= nil) or (self.chunk_buf ~= nil))) then 
    _G.error(__haxe_Exception.thrown("Invalid chunk"),0);
  end;
  if ((status < 200) or (status >= 400)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Http Error #") .. Std.string(status)),0);
  end;
  api:close();
end
__sys_Http.prototype.readChunk = function(self,chunk_re,api,buf,len) 
  if (self.chunk_size == nil) then 
    if (self.chunk_buf ~= nil) then 
      local b = __haxe_io_BytesBuffer.new();
      local src = self.chunk_buf;
      local b1 = b.b;
      local b2 = src.b;
      local _g = 0;
      local _g1 = src.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        b.b:push(b2[i]);
      end;
      if ((len < 0) or (len > buf.length)) then 
        _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
      end;
      local b1 = b.b;
      local b2 = buf.b;
      local _g = 0;
      local _g1 = len;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        b.b:push(b2[i]);
      end;
      buf = b:getBytes();
      len = len + self.chunk_buf.length;
      self.chunk_buf = nil;
    end;
    if (chunk_re:match(buf:toString())) then 
      local p = chunk_re:matchedPos();
      if (p.len <= len) then 
        local cstr = chunk_re:matched(1);
        self.chunk_size = Std.parseInt(Std.string("0x") .. Std.string(cstr));
        if (self.chunk_size == 0) then 
          self.chunk_size = nil;
          self.chunk_buf = nil;
          do return false end;
        end;
        len = len - p.len;
        do return self:readChunk(chunk_re, api, buf:sub(p.len, len), len) end;
      end;
    end;
    if (len > 10) then 
      self:onError("Invalid chunk");
      do return false end;
    end;
    self.chunk_buf = buf:sub(0, len);
    do return true end;
  end;
  if (self.chunk_size > len) then 
    local tmp = self;
    tmp.chunk_size = tmp.chunk_size - len;
    api:writeBytes(buf, 0, len);
    do return true end;
  end;
  local _end = self.chunk_size + 2;
  if (len >= _end) then 
    if (self.chunk_size > 0) then 
      api:writeBytes(buf, 0, self.chunk_size);
    end;
    len = len - _end;
    self.chunk_size = nil;
    if (len == 0) then 
      do return true end;
    end;
    do return self:readChunk(chunk_re, api, buf:sub(_end, len), len) end;
  end;
  if (self.chunk_size > 0) then 
    api:writeBytes(buf, 0, self.chunk_size);
  end;
  local tmp = self;
  tmp.chunk_size = tmp.chunk_size - len;
  do return true end
end

__sys_Http.prototype.__class__ =  __sys_Http
__sys_Http.__super__ = __haxe_http_HttpBase
setmetatable(__sys_Http.prototype,{__index=__haxe_http_HttpBase.prototype})

__sys_net_Host.new = function(name) 
  local self = _hx_new(__sys_net_Host.prototype)
  __sys_net_Host.super(self,name)
  return self
end
__sys_net_Host.super = function(self,name) 
  self.host = name;
  if (_G.string.find(name, "(%d+)%.(%d+)%.(%d+)%.(%d+)") ~= nil) then 
    self._ip = name;
  else
    local _hx_1_res_result, _hx_1_res_message = __lua_lib_luv_net_Dns.getaddrinfo(name);
    if (_hx_1_res_result == nil) then 
      _G.error(__haxe_Exception.thrown("Unrecognized node name"),0);
    end;
    self._ip = _hx_funcToField(_hx_1_res_result[1].addr);
    if (self._ip == "::1") then 
      self._ip = "127.0.0.0";
    end;
  end;
  local num = 0;
  local _g = 0;
  local _this = self._ip;
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(".") > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(_this, ".", idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(_this)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(_this, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(".");
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(_this, idx, __lua_lib_luautf8_Utf8.len(_this)));
      idx = nil;
    end;
  end;
  local _g1 = ret;
  while (_g < _g1.length) do 
    local a = _g1[_g];
    _g = _g + 1;
    num = (num * 256) + _G.tonumber(a);
  end;
  self.ip = num;
end
__sys_net_Host.__name__ = true
__sys_net_Host.prototype = _hx_e();

__sys_net_Host.prototype.__class__ =  __sys_net_Host

__sys_net_Socket.new = function() 
  local self = _hx_new(__sys_net_Socket.prototype)
  __sys_net_Socket.super(self)
  return self
end
__sys_net_Socket.super = function(self) 
  self.timeout = nil;
end
__sys_net_Socket.__name__ = true
__sys_net_Socket.prototype = _hx_e();
__sys_net_Socket.prototype.close = function(self) 
  self._socket:close();
end
__sys_net_Socket.prototype.connect = function(self,host,port) 
  local _hx_1_res_result, _hx_1_res_message = __lua_lib_luasocket_Socket.connect(host.host, port);
  if (_hx_1_res_message ~= nil) then 
    _G.error(__haxe_Exception.thrown(Std.string("Socket Error : ") .. Std.string(_hx_1_res_message)),0);
  end;
  self.input = __sys_net__Socket_SocketInput.new(_hx_1_res_result);
  self.output = __sys_net__Socket_SocketOutput.new(_hx_1_res_result);
  self._socket = _hx_1_res_result;
  self._socket:settimeout(self.timeout);
end
__sys_net_Socket.prototype.shutdown = function(self,read,write) 
  local client = self._socket;
  if (read) then 
    if (write) then 
      _hx_box_mr(_hx_table.pack(client:shutdown("both")), {"result", "message"});
    else
      _hx_box_mr(_hx_table.pack(client:shutdown("receive")), {"result", "message"});
    end;
  else
    if (write == true) then 
      _hx_box_mr(_hx_table.pack(client:shutdown("send")), {"result", "message"});
    end;
  end;
end

__sys_net_Socket.prototype.__class__ =  __sys_net_Socket

__sys_net__Socket_SocketInput.new = function(tcp) 
  local self = _hx_new(__sys_net__Socket_SocketInput.prototype)
  __sys_net__Socket_SocketInput.super(self,tcp)
  return self
end
__sys_net__Socket_SocketInput.super = function(self,tcp) 
  self.tcp = tcp;
end
__sys_net__Socket_SocketInput.__name__ = true
__sys_net__Socket_SocketInput.prototype = _hx_e();
__sys_net__Socket_SocketInput.prototype.readByte = function(self) 
  local _hx_1_res_result, _hx_1_res_message = self.tcp:receive(1);
  if (_hx_1_res_message == "closed") then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Eof.new()),0);
  else
    if (_hx_1_res_message ~= nil) then 
      _G.error(__haxe_Exception.thrown(Std.string("Error : ") .. Std.string(_hx_1_res_message)),0);
    end;
  end;
  do return __lua_lib_luautf8_Utf8.byte(_hx_1_res_result, 1) end
end
__sys_net__Socket_SocketInput.prototype.readBytes = function(self,s,pos,len) 
  local leftToRead = len;
  local b = s.b;
  if (((pos < 0) or (len < 0)) or ((pos + len) > s.length)) then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
  end;
  local readCount = 0;
  local _hx_status, _hx_result = pcall(function() 
  
      while (leftToRead > 0) do 
        b[pos] = self:readByte();
        pos = pos + 1;
        readCount = readCount + 1;
        leftToRead = leftToRead - 1;
      end;
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    local _g1 = __haxe_Exception.caught(_g):unwrap();
    if (__lua_Boot.__instanceof(_g1, __haxe_io_Eof)) then 
      local e = _g1;
      if (readCount == 0) then 
        _G.error(__haxe_Exception.thrown(e),0);
      end;
    else
      _G.error(_g,0);
    end;
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
  do return readCount end
end

__sys_net__Socket_SocketInput.prototype.__class__ =  __sys_net__Socket_SocketInput
__sys_net__Socket_SocketInput.__super__ = __haxe_io_Input
setmetatable(__sys_net__Socket_SocketInput.prototype,{__index=__haxe_io_Input.prototype})

__sys_net__Socket_SocketOutput.new = function(tcp) 
  local self = _hx_new(__sys_net__Socket_SocketOutput.prototype)
  __sys_net__Socket_SocketOutput.super(self,tcp)
  return self
end
__sys_net__Socket_SocketOutput.super = function(self,tcp) 
  self.tcp = tcp;
end
__sys_net__Socket_SocketOutput.__name__ = true
__sys_net__Socket_SocketOutput.prototype = _hx_e();
__sys_net__Socket_SocketOutput.prototype.writeByte = function(self,c) 
  local char = _G.string.char(c);
  local _hx_1_res_result, _hx_1_res_message = self.tcp:send(char);
  if (_hx_1_res_message ~= nil) then 
    _G.error(__haxe_Exception.thrown(Std.string("Error : Socket writeByte : ") .. Std.string(_hx_1_res_message)),0);
  end;
end
__sys_net__Socket_SocketOutput.prototype.writeBytes = function(self,s,pos,len) 
  if (((pos < 0) or (len < 0)) or ((pos + len) > s.length)) then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
  end;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = s.b:slice(pos, pos + len);
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(_G.string.char(i));
  end;
  local b = _g;
  local encoded = _G.table.concat(b, nil, 0);
  local _hx_1_res_result, _hx_1_res_message = self.tcp:send(encoded);
  if (_hx_1_res_message ~= nil) then 
    _G.error(__haxe_Exception.thrown(Std.string("Error : Socket writeByte : ") .. Std.string(_hx_1_res_message)),0);
  end;
  do return len end
end

__sys_net__Socket_SocketOutput.prototype.__class__ =  __sys_net__Socket_SocketOutput
__sys_net__Socket_SocketOutput.__super__ = __haxe_io_Output
setmetatable(__sys_net__Socket_SocketOutput.prototype,{__index=__haxe_io_Output.prototype})

__tink_core__Callback_Callback_Impl_.new = {}
__tink_core__Callback_Callback_Impl_.__name__ = true
__tink_core__Callback_Callback_Impl_._new = function(f) 
  local this1 = f;
  do return this1 end;
end
__tink_core__Callback_Callback_Impl_.toFunction = function(this1) 
  do return this1 end;
end
__tink_core__Callback_Callback_Impl_.invoke = function(this1,data) 
  if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
    this1(data);
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
  else
    __tink_core__Callback_Callback_Impl_.defer(function() 
      this1(data);
    end);
  end;
end
__tink_core__Callback_Callback_Impl_.fromNiladic = function(f) 
  do return function(_) 
    f();
  end end;
end
__tink_core__Callback_Callback_Impl_.fromMany = function(callbacks) 
  do return function(v) 
    local _g = 0;
    while (_g < callbacks.length) do 
      local callback = callbacks[_g];
      _g = _g + 1;
      __tink_core__Callback_Callback_Impl_.invoke(callback, v);
    end;
  end end;
end
__tink_core__Callback_Callback_Impl_.defer = function(f) 
  __haxe_Timer.delay(f, 0);
end

__tink_core_LinkObject.new = {}
__tink_core_LinkObject.__name__ = true
__tink_core_LinkObject.prototype = _hx_e();

__tink_core_LinkObject.prototype.__class__ =  __tink_core_LinkObject

__tink_core_CallbackLinkRef.new = function() 
  local self = _hx_new(__tink_core_CallbackLinkRef.prototype)
  __tink_core_CallbackLinkRef.super(self)
  return self
end
__tink_core_CallbackLinkRef.super = function(self) 
end
__tink_core_CallbackLinkRef.__name__ = true
__tink_core_CallbackLinkRef.__interfaces__ = {__tink_core_LinkObject}
__tink_core_CallbackLinkRef.prototype = _hx_e();
__tink_core_CallbackLinkRef.prototype.cancel = function(self) 
  local this1 = self.link;
  if (this1 ~= nil) then 
    this1:cancel();
  end;
end

__tink_core_CallbackLinkRef.prototype.__class__ =  __tink_core_CallbackLinkRef

__tink_core__Callback_CallbackLink_Impl_.new = {}
__tink_core__Callback_CallbackLink_Impl_.__name__ = true
__tink_core__Callback_CallbackLink_Impl_._new = function(link) 
  local this1 = __tink_core_SimpleLink.new(link);
  do return this1 end;
end
__tink_core__Callback_CallbackLink_Impl_.cancel = function(this1) 
  if (this1 ~= nil) then 
    this1:cancel();
  end;
end
__tink_core__Callback_CallbackLink_Impl_.dissolve = function(this1) 
  if (this1 ~= nil) then 
    this1:cancel();
  end;
end
__tink_core__Callback_CallbackLink_Impl_.noop = function() 
end
__tink_core__Callback_CallbackLink_Impl_.toFunction = function(this1) 
  if (this1 == nil) then 
    do return __tink_core__Callback_CallbackLink_Impl_.noop end;
  else
    do return _hx_bind(this1,_hx_bind(this1,this1.cancel)) end;
  end;
end
__tink_core__Callback_CallbackLink_Impl_.toCallback = function(this1) 
  if (this1 == nil) then 
    do return function(_) 
      __tink_core__Callback_CallbackLink_Impl_.noop();
    end end;
  else
    local f = _hx_bind(this1,this1.cancel);
    do return function(_) 
      f();
    end end;
  end;
end
__tink_core__Callback_CallbackLink_Impl_.fromFunction = function(f) 
  local this1 = __tink_core_SimpleLink.new(f);
  do return this1 end;
end
__tink_core__Callback_CallbackLink_Impl_.join = function(this1,b) 
  do return __tink_core__Callback_LinkPair.new(this1, b) end;
end
__tink_core__Callback_CallbackLink_Impl_.fromMany = function(callbacks) 
  local this1 = __tink_core_SimpleLink.new(function() 
    if (callbacks ~= nil) then 
      local _g = 0;
      while (_g < callbacks.length) do 
        local cb = callbacks[_g];
        _g = _g + 1;
        if (cb ~= nil) then 
          cb:cancel();
        end;
      end;
    else
      callbacks = nil;
    end;
  end);
  do return this1 end;
end

__tink_core_SimpleLink.new = function(f) 
  local self = _hx_new(__tink_core_SimpleLink.prototype)
  __tink_core_SimpleLink.super(self,f)
  return self
end
__tink_core_SimpleLink.super = function(self,f) 
  self.f = _hx_funcToField(f);
end
__tink_core_SimpleLink.__name__ = true
__tink_core_SimpleLink.__interfaces__ = {__tink_core_LinkObject}
__tink_core_SimpleLink.prototype = _hx_e();
__tink_core_SimpleLink.prototype.cancel = function(self) 
  if (self.f ~= nil) then 
    self:f();
    self.f = nil;
  end;
end

__tink_core_SimpleLink.prototype.__class__ =  __tink_core_SimpleLink

__tink_core__Callback_LinkPair.new = function(a,b) 
  local self = _hx_new(__tink_core__Callback_LinkPair.prototype)
  __tink_core__Callback_LinkPair.super(self,a,b)
  return self
end
__tink_core__Callback_LinkPair.super = function(self,a,b) 
  self.dissolved = false;
  self.a = a;
  self.b = b;
end
__tink_core__Callback_LinkPair.__name__ = true
__tink_core__Callback_LinkPair.__interfaces__ = {__tink_core_LinkObject}
__tink_core__Callback_LinkPair.prototype = _hx_e();
__tink_core__Callback_LinkPair.prototype.cancel = function(self) 
  if (not self.dissolved) then 
    self.dissolved = true;
    local this1 = self.a;
    if (this1 ~= nil) then 
      this1:cancel();
    end;
    local this1 = self.b;
    if (this1 ~= nil) then 
      this1:cancel();
    end;
    self.a = nil;
    self.b = nil;
  end;
end

__tink_core__Callback_LinkPair.prototype.__class__ =  __tink_core__Callback_LinkPair

__tink_core__Callback_ListCell.new = function(cb,list) 
  local self = _hx_new(__tink_core__Callback_ListCell.prototype)
  __tink_core__Callback_ListCell.super(self,cb,list)
  return self
end
__tink_core__Callback_ListCell.super = function(self,cb,list) 
  if (cb == nil) then 
    _G.error(__haxe_Exception.thrown("callback expected but null received"),0);
  end;
  self.cb = _hx_funcToField(cb);
  self.list = list;
end
__tink_core__Callback_ListCell.__name__ = true
__tink_core__Callback_ListCell.__interfaces__ = {__tink_core_LinkObject}
__tink_core__Callback_ListCell.prototype = _hx_e();
__tink_core__Callback_ListCell.prototype.invoke = function(self,data) 
  if (self.list ~= nil) then 
    self:cb(data);
  end;
end
__tink_core__Callback_ListCell.prototype.clear = function(self) 
  self.cb = nil;
  self.list = nil;
end
__tink_core__Callback_ListCell.prototype.cancel = function(self) 
  if (self.list ~= nil) then 
    local list = self.list;
    self.cb = nil;
    self.list = nil;
    local tmp = (function() 
    local _hx_obj = list;
    local _hx_fld = 'used';
    _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  - 1;
     return _hx_obj[_hx_fld];
     end)();
    if (tmp <= (_hx_bit.arshift(list.cells.length,1))) then 
      list:compact();
    end;
  end;
end

__tink_core__Callback_ListCell.prototype.__class__ =  __tink_core__Callback_ListCell

__tink_core_Disposable.new = {}
__tink_core_Disposable.__name__ = true
__tink_core_Disposable.prototype = _hx_e();

__tink_core_Disposable.prototype.__class__ =  __tink_core_Disposable

__tink_core_OwnedDisposable.new = {}
__tink_core_OwnedDisposable.__name__ = true
__tink_core_OwnedDisposable.__interfaces__ = {__tink_core_Disposable}
__tink_core_OwnedDisposable.prototype = _hx_e();

__tink_core_OwnedDisposable.prototype.__class__ =  __tink_core_OwnedDisposable

__tink_core_SimpleDisposable.new = function(dispose) 
  local self = _hx_new(__tink_core_SimpleDisposable.prototype)
  __tink_core_SimpleDisposable.super(self,dispose)
  return self
end
__tink_core_SimpleDisposable.super = function(self,dispose) 
  self.disposeHandlers = _hx_tab_array({}, 0);
  self.f = _hx_funcToField(dispose);
end
__tink_core_SimpleDisposable.__name__ = true
__tink_core_SimpleDisposable.__interfaces__ = {__tink_core_OwnedDisposable}
__tink_core_SimpleDisposable.noop = function() 
end
__tink_core_SimpleDisposable.prototype = _hx_e();
__tink_core_SimpleDisposable.prototype.get_disposed = function(self) 
  do return self.disposeHandlers == nil end
end
__tink_core_SimpleDisposable.prototype.ondispose = function(self,d) 
  local _g = self.disposeHandlers;
  if (_g == nil) then 
    d();
  else
    local v = _g;
    v:push(d);
  end;
end
__tink_core_SimpleDisposable.prototype.dispose = function(self) 
  local _g = self.disposeHandlers;
  if (_g ~= nil) then 
    local v = _g;
    self.disposeHandlers = nil;
    local f = self.f;
    self.f = _hx_funcToField(__tink_core_SimpleDisposable.noop);
    f();
    local _g = 0;
    while (_g < v.length) do 
      local h = v[_g];
      _g = _g + 1;
      h();
    end;
  end;
end

__tink_core_SimpleDisposable.prototype.__class__ =  __tink_core_SimpleDisposable

__tink_core_CallbackList.new = function(destructive) 
  local self = _hx_new(__tink_core_CallbackList.prototype)
  __tink_core_CallbackList.super(self,destructive)
  return self
end
__tink_core_CallbackList.super = function(self,destructive) 
  if (destructive == nil) then 
    destructive = false;
  end;
  self.onfill = function(self) 
   end;
  self.ondrain = function(self) 
   end;
  self.busy = false;
  self.queue = _hx_tab_array({}, 0);
  self.used = 0;
  local _gthis = self;
  __tink_core_SimpleDisposable.super(self,function() 
    if (not _gthis.busy) then 
      _gthis:destroy();
    end;
  end);
  self.destructive = destructive;
  self.cells = _hx_tab_array({}, 0);
end
__tink_core_CallbackList.__name__ = true
__tink_core_CallbackList.prototype = _hx_e();
__tink_core_CallbackList.prototype.get_length = function(self) 
  do return self.used end
end
__tink_core_CallbackList.prototype.release = function(self) 
  local tmp = (function() 
  local _hx_obj = self;
  local _hx_fld = 'used';
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  - 1;
   return _hx_obj[_hx_fld];
   end)();
  if (tmp <= (_hx_bit.arshift(self.cells.length,1))) then 
    self:compact();
  end;
end
__tink_core_CallbackList.prototype.destroy = function(self) 
  local _g = 0;
  local _g1 = self.cells;
  while (_g < _g1.length) do 
    local c = _g1[_g];
    _g = _g + 1;
    c.cb = nil;
    c.list = nil;
  end;
  self.queue = nil;
  self.cells = nil;
  if (self.used > 0) then 
    self.used = 0;
    local fn = self.ondrain;
    if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
      __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
      fn();
      __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
    else
      __tink_core__Callback_Callback_Impl_.defer(fn);
    end;
  end;
end
__tink_core_CallbackList.prototype.drain = function(self) 
  local fn = self.ondrain;
  if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
    fn();
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
  else
    __tink_core__Callback_Callback_Impl_.defer(fn);
  end;
end
__tink_core_CallbackList.prototype.add = function(self,cb) 
  if (self.disposeHandlers == nil) then 
    do return nil end;
  end;
  local node = __tink_core__Callback_ListCell.new(cb, self);
  self.cells:push(node);
  local tmp = (function() 
  local _hx_obj = self;
  local _hx_fld = 'used';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)() == 0;
  if (tmp) then 
    local fn = self.onfill;
    if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
      __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
      fn();
      __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
    else
      __tink_core__Callback_Callback_Impl_.defer(fn);
    end;
  end;
  do return node end
end
__tink_core_CallbackList.prototype.invoke = function(self,data) 
  local _gthis = self;
  if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
    if (_gthis.disposeHandlers ~= nil) then 
      if (_gthis.busy) then 
        if (_gthis.destructive ~= true) then 
          local _g = _hx_bind(_gthis,_gthis.invoke);
          local data = data;
          local tmp = function() 
            _g(data);
          end;
          _gthis.queue:push(tmp);
        end;
      else
        _gthis.busy = true;
        if (_gthis.destructive) then 
          _gthis:dispose();
        end;
        local length = _gthis.cells.length;
        local _g = 0;
        local _g1 = length;
        while (_g < _g1) do 
          _g = _g + 1;
          local i = _g - 1;
          local _this = _gthis.cells[i];
          if (_this.list ~= nil) then 
            _this:cb(data);
          end;
        end;
        _gthis.busy = false;
        if (_gthis.disposeHandlers == nil) then 
          _gthis:destroy();
        else
          if (_gthis.used < _gthis.cells.length) then 
            _gthis:compact();
          end;
          if (_gthis.queue.length > 0) then 
            (_gthis.queue:shift())();
          end;
        end;
      end;
    end;
    __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
  else
    __tink_core__Callback_Callback_Impl_.defer(function() 
      if (_gthis.disposeHandlers ~= nil) then 
        if (_gthis.busy) then 
          if (_gthis.destructive ~= true) then 
            local _g = _hx_bind(_gthis,_gthis.invoke);
            local data = data;
            local tmp = function() 
              _g(data);
            end;
            _gthis.queue:push(tmp);
          end;
        else
          _gthis.busy = true;
          if (_gthis.destructive) then 
            _gthis:dispose();
          end;
          local length = _gthis.cells.length;
          local _g = 0;
          local _g1 = length;
          while (_g < _g1) do 
            _g = _g + 1;
            local i = _g - 1;
            local _this = _gthis.cells[i];
            if (_this.list ~= nil) then 
              _this:cb(data);
            end;
          end;
          _gthis.busy = false;
          if (_gthis.disposeHandlers == nil) then 
            _gthis:destroy();
          else
            if (_gthis.used < _gthis.cells.length) then 
              _gthis:compact();
            end;
            if (_gthis.queue.length > 0) then 
              (_gthis.queue:shift())();
            end;
          end;
        end;
      end;
    end);
  end;
end
__tink_core_CallbackList.prototype.compact = function(self) 
  if (self.busy) then 
    do return end;
  else
    if (self.used == 0) then 
      self:resize(0);
      local fn = self.ondrain;
      if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
        __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
        fn();
        __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
      else
        __tink_core__Callback_Callback_Impl_.defer(fn);
      end;
    else
      local compacted = 0;
      local _g = 0;
      local _g1 = self.cells.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        local _g = self.cells[i];
        local _g1 = _g.list;
        if (_g.cb ~= nil) then 
          local v = _g;
          if (compacted ~= i) then 
            self.cells[compacted] = v;
          end;
          compacted = compacted + 1;
          if (compacted == self.used) then 
            break;
          end;
        end;
      end;
      self:resize(self.used);
    end;
  end;
end
__tink_core_CallbackList.prototype.resize = function(self,length) 
  self.cells:resize(length);
end
__tink_core_CallbackList.prototype.clear = function(self) 
  if (self.busy) then 
    self.queue:push(_hx_bind(self,self.clear));
  end;
  local _g = 0;
  local _g1 = self.cells;
  while (_g < _g1.length) do 
    local cell = _g1[_g];
    _g = _g + 1;
    cell.cb = nil;
    cell.list = nil;
  end;
  self:resize(0);
end

__tink_core_CallbackList.prototype.__class__ =  __tink_core_CallbackList
__tink_core_CallbackList.__super__ = __tink_core_SimpleDisposable
setmetatable(__tink_core_CallbackList.prototype,{__index=__tink_core_SimpleDisposable.prototype})

__tink_core_AlreadyDisposed.new = function() 
  local self = _hx_new(__tink_core_AlreadyDisposed.prototype)
  __tink_core_AlreadyDisposed.super(self)
  return self
end
__tink_core_AlreadyDisposed.super = function(self) 
end
__tink_core_AlreadyDisposed.__name__ = true
__tink_core_AlreadyDisposed.__interfaces__ = {__tink_core_OwnedDisposable}
__tink_core_AlreadyDisposed.prototype = _hx_e();
__tink_core_AlreadyDisposed.prototype.get_disposed = function(self) 
  do return true end
end
__tink_core_AlreadyDisposed.prototype.ondispose = function(self,d) 
  d();
end
__tink_core_AlreadyDisposed.prototype.dispose = function(self) 
end

__tink_core_AlreadyDisposed.prototype.__class__ =  __tink_core_AlreadyDisposed

__tink_core_TypedError.new = function(code,message,pos) 
  local self = _hx_new(__tink_core_TypedError.prototype)
  __tink_core_TypedError.super(self,code,message,pos)
  return self
end
__tink_core_TypedError.super = function(self,code,message,pos) 
  if (code == nil) then 
    code = 500;
  end;
  self.isTinkError = true;
  self.code = code;
  self.message = message;
  self.pos = pos;
  self.exceptionStack = _hx_tab_array({}, 0);
  self.callStack = _hx_tab_array({}, 0);
end
__tink_core_TypedError.__name__ = true
__tink_core_TypedError.withData = function(code,message,data,pos) 
  do return __tink_core_TypedError.typed(code, message, data, pos) end;
end
__tink_core_TypedError.typed = function(code,message,data,pos) 
  local ret = __tink_core_TypedError.new(code, message, pos);
  ret.data = data;
  do return ret end;
end
__tink_core_TypedError.asError = function(v) 
  local value = v;
  if (__lua_Boot.__instanceof(value, __tink_core_TypedError)) then 
    do return value end;
  else
    do return nil end;
  end;
end
__tink_core_TypedError.catchExceptions = function(f,report,pos) 
  local _hx_status, _hx_result = pcall(function() 
  
      do return __tink_core_Outcome.Success(f()) end;
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    local e = __haxe_Exception.caught(_g):unwrap();
    local e = __tink_core_TypedError.asError(e);
    local tmp;
    if (e == nil) then 
      tmp = (function() 
        local _hx_1
        if (report == nil) then 
        _hx_1 = __tink_core_TypedError.withData(nil, "Unexpected Error", e, pos); else 
        _hx_1 = report(e); end
        return _hx_1
      end )();
    else
      local e = e;
      tmp = e;
    end;
    do return __tink_core_Outcome.Failure(tmp) end;
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
end
__tink_core_TypedError.reporter = function(code,message,pos) 
  do return function(e) 
    do return __tink_core_TypedError.withData(code, message, e, pos) end;
  end end;
end
__tink_core_TypedError.rethrow = function(any) 
  _G.error(__haxe_Exception.thrown(any),0);
end
__tink_core_TypedError.tryFinally = function(f,cleanup) 
  local _hx_status, _hx_result = pcall(function() 
  
      local ret = f();
      cleanup();
      do return ret end;
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    local e = __haxe_Exception.caught(_g):unwrap();
    cleanup();
    _G.error(__haxe_Exception.thrown(e),0);
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
end
__tink_core_TypedError.prototype = _hx_e();
__tink_core_TypedError.prototype.printPos = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(self.pos.className) .. Std.string(".")) .. Std.string(self.pos.methodName)) .. Std.string(":")) .. Std.string(self.pos.lineNumber) end
end
__tink_core_TypedError.prototype.toString = function(self) 
  local ret = Std.string(Std.string(Std.string("Error#") .. Std.string(self.code)) .. Std.string(": ")) .. Std.string(self.message);
  if (self.pos ~= nil) then 
    ret = Std.string(ret) .. Std.string((Std.string(" @ ") .. Std.string(self:printPos())));
  end;
  do return ret end
end
__tink_core_TypedError.prototype.toPromise = function(self) 
  do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Failure(self))) end
end
__tink_core_TypedError.prototype.throwSelf = function(self) 
  local any = self;
  _G.error(__haxe_Exception.thrown(any),0);
end

__tink_core_TypedError.prototype.__class__ =  __tink_core_TypedError

__tink_core__Error_Stack_Impl_.new = {}
__tink_core__Error_Stack_Impl_.__name__ = true
__tink_core__Error_Stack_Impl_.toString = function(this1) 
  do return "Error stack not available. Compile with -D error_stack." end;
end

__tink_core__Future_FutureObject.new = {}
__tink_core__Future_FutureObject.__name__ = true
__tink_core__Future_FutureObject.prototype = _hx_e();

__tink_core__Future_FutureObject.prototype.__class__ =  __tink_core__Future_FutureObject

__tink_core__Future_NeverFuture.new = function() 
  local self = _hx_new(__tink_core__Future_NeverFuture.prototype)
  __tink_core__Future_NeverFuture.super(self)
  return self
end
__tink_core__Future_NeverFuture.super = function(self) 
end
__tink_core__Future_NeverFuture.__name__ = true
__tink_core__Future_NeverFuture.__interfaces__ = {__tink_core__Future_FutureObject}
__tink_core__Future_NeverFuture.prototype = _hx_e();
__tink_core__Future_NeverFuture.prototype.getStatus = function(self) 
  do return __tink_core_FutureStatus.NeverEver end
end
__tink_core__Future_NeverFuture.prototype.handle = function(self,callback) 
  do return nil end
end
__tink_core__Future_NeverFuture.prototype.eager = function(self) 
end

__tink_core__Future_NeverFuture.prototype.__class__ =  __tink_core__Future_NeverFuture

__tink_core__Lazy_Computable.new = {}
__tink_core__Lazy_Computable.__name__ = true
__tink_core__Lazy_Computable.prototype = _hx_e();

__tink_core__Lazy_Computable.prototype.__class__ =  __tink_core__Lazy_Computable

__tink_core__Lazy_LazyObject.new = {}
__tink_core__Lazy_LazyObject.__name__ = true
__tink_core__Lazy_LazyObject.__interfaces__ = {__tink_core__Lazy_Computable}
__tink_core__Lazy_LazyObject.prototype = _hx_e();

__tink_core__Lazy_LazyObject.prototype.__class__ =  __tink_core__Lazy_LazyObject

__tink_core__Lazy_LazyConst.new = function(value) 
  local self = _hx_new(__tink_core__Lazy_LazyConst.prototype)
  __tink_core__Lazy_LazyConst.super(self,value)
  return self
end
__tink_core__Lazy_LazyConst.super = function(self,value) 
  self.value = value;
end
__tink_core__Lazy_LazyConst.__name__ = true
__tink_core__Lazy_LazyConst.__interfaces__ = {__tink_core__Lazy_LazyObject}
__tink_core__Lazy_LazyConst.prototype = _hx_e();
__tink_core__Lazy_LazyConst.prototype.isComputed = function(self) 
  do return true end
end
__tink_core__Lazy_LazyConst.prototype.get = function(self) 
  do return self.value end
end
__tink_core__Lazy_LazyConst.prototype.compute = function(self) 
end
__tink_core__Lazy_LazyConst.prototype.underlying = function(self) 
  do return nil end
end

__tink_core__Lazy_LazyConst.prototype.__class__ =  __tink_core__Lazy_LazyConst

__tink_core__Future_SyncFuture.new = function(value) 
  local self = _hx_new(__tink_core__Future_SyncFuture.prototype)
  __tink_core__Future_SyncFuture.super(self,value)
  return self
end
__tink_core__Future_SyncFuture.super = function(self,value) 
  self.value = value;
end
__tink_core__Future_SyncFuture.__name__ = true
__tink_core__Future_SyncFuture.__interfaces__ = {__tink_core__Future_FutureObject}
__tink_core__Future_SyncFuture.prototype = _hx_e();
__tink_core__Future_SyncFuture.prototype.getStatus = function(self) 
  do return __tink_core_FutureStatus.Ready(self.value) end
end
__tink_core__Future_SyncFuture.prototype.handle = function(self,cb) 
  __tink_core__Callback_Callback_Impl_.invoke(cb, __tink_core__Lazy_Lazy_Impl_.get(self.value));
  do return nil end
end
__tink_core__Future_SyncFuture.prototype.eager = function(self) 
  if (not self.value:isComputed()) then 
    __tink_core__Lazy_Lazy_Impl_.get(self.value);
  end;
end

__tink_core__Future_SyncFuture.prototype.__class__ =  __tink_core__Future_SyncFuture

__tink_core__Future_Future_Impl_.new = {}
__tink_core__Future_Future_Impl_.__name__ = true
__tink_core__Future_Future_Impl_.get_status = function(this1) 
  do return this1:getStatus() end;
end
__tink_core__Future_Future_Impl_._new = function(wakeup) 
  local this1 = __tink_core__Future_SuspendableFuture.new(wakeup);
  do return this1 end;
end
__tink_core__Future_Future_Impl_.handle = function(this1,callback) 
  do return this1:handle(callback) end;
end
__tink_core__Future_Future_Impl_.eager = function(this1) 
  this1:eager();
  do return this1 end;
end
__tink_core__Future_Future_Impl_.noise = function(this1) 
  if (this1:getStatus()[1] == 4) then 
    do return __tink_core__Future_Future_Impl_.NEVER end;
  else
    do return __tink_core__Future_Future_Impl_.map(this1, function(_) 
      do return nil end;
    end) end;
  end;
end
__tink_core__Future_Future_Impl_.first = function(this1,that) 
  local _g = this1;
  local _g1 = _g:getStatus();
  local tmp = _g1[1];
  if (tmp) == 3 then 
    local _g1 = _g1[2];
    local _g1 = that:getStatus();
    local tmp = _g1[1];
    if (tmp) == 3 then 
      local _g1 = _g1[2];
      local v = _g;
      do return v end;
    elseif (tmp) == 4 then 
      local v = _g;
      do return v end;else
    local v = _g;
    do return v end; end;
  elseif (tmp) == 4 then 
    local v = that;
    do return v end;else
  local _g1 = that:getStatus();
  local tmp = _g1[1];
  if (tmp) == 3 then 
    local _g = _g1[2];
    local v = that;
    do return v end;
  elseif (tmp) == 4 then 
    local v = _g;
    do return v end;else
  do return __tink_core__Future_SuspendableFuture.new(function(fire) 
    do return __tink_core__Callback_LinkPair.new(this1:handle(fire), that:handle(fire)) end;
  end) end; end; end;
end
__tink_core__Future_Future_Impl_.map = function(this1,f,gather) 
  local _g = this1:getStatus();
  local tmp = _g[1];
  if (tmp) == 3 then 
    local l = _g[2];
    local this1 = l;
    local f = f;
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyFunc.new(function() 
      do return f(this1:get()) end;
    end, this1)) end;
  elseif (tmp) == 4 then 
    do return __tink_core__Future_Future_Impl_.NEVER end;else
  do return __tink_core__Future_SuspendableFuture.new(function(fire) 
    do return this1:handle(function(v) 
      fire(f(v));
    end) end;
  end) end; end;
end
__tink_core__Future_Future_Impl_.flatMap = function(this1,next,gather) 
  local _g = this1:getStatus();
  local tmp = _g[1];
  if (tmp) == 3 then 
    local l = _g[2];
    do return __tink_core__Future_SuspendableFuture.new(function(fire) 
      do return next(__tink_core__Lazy_Lazy_Impl_.get(l)):handle(function(v) 
        fire(v);
      end) end;
    end) end;
  elseif (tmp) == 4 then 
    do return __tink_core__Future_Future_Impl_.NEVER end;else
  do return __tink_core__Future_SuspendableFuture.new(function(yield) 
    local inner = __tink_core_CallbackLinkRef.new();
    local outer = this1:handle(function(v) 
      local outer = next(v):handle(yield);
      inner.link = outer;
    end);
    do return __tink_core__Callback_LinkPair.new(outer, inner) end;
  end) end; end;
end
__tink_core__Future_Future_Impl_.next = function(this1,n) 
  do return __tink_core__Future_Future_Impl_.flatMap(this1, n) end;
end
__tink_core__Future_Future_Impl_.gather = function(this1) 
  do return this1 end;
end
__tink_core__Future_Future_Impl_.merge = function(this1,that,combine) 
  local _g = this1:getStatus();
  local _g1 = that:getStatus();
  if (_g[1] == 4) then 
    do return __tink_core__Future_Future_Impl_.NEVER end;
  else
    if (_g1[1] == 4) then 
      do return __tink_core__Future_Future_Impl_.NEVER end;
    else
      do return __tink_core__Future_SuspendableFuture.new(function(yield) 
        local check = function(v) 
          local _g = this1:getStatus();
          local _g1 = that:getStatus();
          if (_g[1] == 3) then 
            if (_g1[1] == 3) then 
              local b = _g1[2];
              local a = _g[2];
              yield(combine(__tink_core__Lazy_Lazy_Impl_.get(a), __tink_core__Lazy_Lazy_Impl_.get(b)));
            end;
          end;
        end;
        do return __tink_core__Callback_LinkPair.new(this1:handle(check), that:handle(check)) end;
      end) end;
    end;
  end;
end
__tink_core__Future_Future_Impl_.flatten = function(f) 
  do return __tink_core__Future_Future_Impl_.flatMap(f, function(v) 
    do return v end;
  end) end;
end
__tink_core__Future_Future_Impl_.neverToAny = function(l) 
  do return l end;
end
__tink_core__Future_Future_Impl_.ofAny = function(v) 
  do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(v)) end;
end
__tink_core__Future_Future_Impl_.asPromise = function(s) 
  do return s end;
end
__tink_core__Future_Future_Impl_.ofMany = function(futures,gather) 
  do return __tink_core__Future_Future_Impl_.inSequence(futures) end;
end
__tink_core__Future_Future_Impl_.inParallel = function(futures,concurrency) 
  do return __tink_core__Future_Future_Impl_.many(futures, concurrency) end;
end
__tink_core__Future_Future_Impl_.inSequence = function(futures) 
  do return __tink_core__Future_Future_Impl_.many(futures, 1) end;
end
__tink_core__Future_Future_Impl_.many = function(a,concurrency) 
  do return __tink_core__Future_Future_Impl_.processMany(a, concurrency, __tink_core_Outcome.Success, function(o) 
    do return __tink_core_OutcomeTools.orNull(o) end;
  end) end;
end
__tink_core__Future_Future_Impl_.processMany = function(a,concurrency,fn,lift) 
  if (a.length == 0) then 
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(lift(__tink_core_Outcome.Success(_hx_tab_array({}, 0))))) end;
  else
    local this1 = __tink_core__Future_SuspendableFuture.new(function(yield) 
      local links = Array.new();
      local _g = _hx_tab_array({}, 0);
      local _g1 = 0;
      while (_g1 < a.length) do 
        local x = a[_g1];
        _g1 = _g1 + 1;
        _g:push(nil);
      end;
      local ret = _g;
      local index = 0;
      local pending = 0;
      local done = false;
      local concurrency1;
      if (concurrency == nil) then 
        concurrency1 = a.length;
      else
        local v = concurrency;
        concurrency1 = (function() 
          local _hx_1
          if (v < 1) then 
          _hx_1 = 1; elseif (v > a.length) then 
          _hx_1 = a.length; else 
          _hx_1 = v; end
          return _hx_1
        end )();
      end;
      local fireWhenReady = function() 
        if (index == ret.length) then 
          if (pending == 0) then 
            local v = lift(__tink_core_Outcome.Success(ret));
            done = true;
            yield(v);
            do return true end;
          else
            do return false end;
          end;
        else
          do return false end;
        end;
      end;
      local step = nil;
      step = function() 
        if (not done and not fireWhenReady()) then 
          local _hx_continue_1 = false;
          while (index < ret.length) do repeat 
            index = index + 1;
            local index = _hx_tab_array({[0]=index - 1}, 1);
            local p = a[index[0]];
            local check = _hx_tab_array({[0]=(function(index) 
              do return function(o) 
                local _g = fn(o);
                local check = _g[1];
                if (check) == 0 then 
                  local v = _g[2];
                  ret[index[0]] = v;
                  fireWhenReady();
                elseif (check) == 1 then 
                  local e = _g[2];
                  local _g = 0;
                  while (_g < links.length) do 
                    local l = links[_g];
                    _g = _g + 1;
                    if (l ~= nil) then 
                      l:cancel();
                    end;
                  end;
                  local v = lift(__tink_core_Outcome.Failure(e));
                  done = true;
                  yield(v); end;
              end end;
            end)(index)}, 1);
            local _g = p:getStatus();
            if (_g[1] == 3) then 
              local _hx_tmp;
              _hx_tmp = __tink_core__Lazy_Lazy_Impl_.get(_g[2]);
              local v = _hx_tmp;
              check[0](v);
              if (not done) then 
                break;
              end;
            else
              pending = pending + 1;
              links:push(p:handle((function(check) 
                do return function(o) 
                  pending = pending - 1;
                  check[0](o);
                  if (not done) then 
                    step();
                  end;
                end end;
              end)(check)));
            end;
            _hx_continue_1 = true;break;until true
            if _hx_continue_1 then 
            _hx_continue_1 = false;
            break;
            end;
            
          end;
        end;
      end;
      local _g = 0;
      local _g1 = concurrency1;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        step();
      end;
      do return __tink_core__Callback_CallbackLink_Impl_.fromMany(links) end;
    end);
    do return this1 end;
  end;
end
__tink_core__Future_Future_Impl_.lazy = function(l) 
  do return __tink_core__Future_SyncFuture.new(l) end;
end
__tink_core__Future_Future_Impl_.sync = function(v) 
  do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(v)) end;
end
__tink_core__Future_Future_Impl_.isFuture = function(maybeFuture) 
  do return __lua_Boot.__instanceof(maybeFuture, __tink_core__Future_FutureObject) end;
end
__tink_core__Future_Future_Impl_.async = function(init,lazy) 
  if (lazy == nil) then 
    lazy = false;
  end;
  local ret = __tink_core__Future_Future_Impl_.irreversible(init);
  if (lazy) then 
    do return ret end;
  else
    ret:eager();
    do return ret end;
  end;
end
__tink_core__Future_Future_Impl_.irreversible = function(init) 
  do return __tink_core__Future_SuspendableFuture.new(function(yield) 
    init(yield);
    do return nil end;
  end) end;
end
__tink_core__Future_Future_Impl_["or"] = function(a,b) 
  do return __tink_core__Future_Future_Impl_.first(a, b) end;
end
__tink_core__Future_Future_Impl_.either = function(a,b) 
  do return __tink_core__Future_Future_Impl_.first(__tink_core__Future_Future_Impl_.map(a, __haxe_ds_Either.Left), __tink_core__Future_Future_Impl_.map(b, __haxe_ds_Either.Right)) end;
end
__tink_core__Future_Future_Impl_["and"] = function(a,b) 
  do return __tink_core__Future_Future_Impl_.merge(a, b, function(a,b) 
    local this1 = __tink_core_MPair.new(a, b);
    do return this1 end;
  end) end;
end
__tink_core__Future_Future_Impl_._tryFailingFlatMap = function(f,map) 
  do return __tink_core__Future_Future_Impl_.flatMap(f, function(o) 
    local tmp = o[1];
    if (tmp) == 0 then 
      local d = o[2];
      do return map(d) end;
    elseif (tmp) == 1 then 
      local f = o[2];
      do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Failure(f))) end; end;
  end) end;
end
__tink_core__Future_Future_Impl_._tryFlatMap = function(f,map) 
  do return __tink_core__Future_Future_Impl_.flatMap(f, function(o) 
    local tmp = o[1];
    if (tmp) == 0 then 
      local d = o[2];
      do return __tink_core__Future_Future_Impl_.map(map(d), __tink_core_Outcome.Success) end;
    elseif (tmp) == 1 then 
      local f = o[2];
      do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Failure(f))) end; end;
  end) end;
end
__tink_core__Future_Future_Impl_._tryFailingMap = function(f,map) 
  do return __tink_core__Future_Future_Impl_.map(f, function(o) 
    do return __tink_core_OutcomeTools.flatMap(o, __tink_core__Outcome_OutcomeMapper_Impl_.withSameError(map)) end;
  end) end;
end
__tink_core__Future_Future_Impl_._tryMap = function(f,map) 
  do return __tink_core__Future_Future_Impl_.map(f, function(o) 
    do return __tink_core_OutcomeTools.map(o, map) end;
  end) end;
end
__tink_core__Future_Future_Impl_._flatMap = function(f,map) 
  do return __tink_core__Future_Future_Impl_.flatMap(f, map) end;
end
__tink_core__Future_Future_Impl_._map = function(f,map) 
  do return __tink_core__Future_Future_Impl_.map(f, map) end;
end
__tink_core__Future_Future_Impl_.trigger = function() 
  do return __tink_core_FutureTrigger.new() end;
end
__tink_core__Future_Future_Impl_.delay = function(ms,value) 
  local this1 = __tink_core__Future_Future_Impl_.irreversible(function(cb) 
    __haxe_Timer.delay(function() 
      cb(__tink_core__Lazy_Lazy_Impl_.get(value));
    end, ms);
  end);
  this1:eager();
  do return this1 end;
end
_hxClasses["tink.core.FutureStatus"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Suspended","Awaited","EagerlyAwaited","Ready","NeverEver"},5)}
__tink_core_FutureStatus = _hxClasses["tink.core.FutureStatus"];
__tink_core_FutureStatus.Suspended = _hx_tab_array({[0]="Suspended",0,__enum__ = __tink_core_FutureStatus},2)

__tink_core_FutureStatus.Awaited = _hx_tab_array({[0]="Awaited",1,__enum__ = __tink_core_FutureStatus},2)

__tink_core_FutureStatus.EagerlyAwaited = _hx_tab_array({[0]="EagerlyAwaited",2,__enum__ = __tink_core_FutureStatus},2)

__tink_core_FutureStatus.Ready = function(result) local _x = _hx_tab_array({[0]="Ready",3,result,__enum__=__tink_core_FutureStatus}, 3); return _x; end 
__tink_core_FutureStatus.NeverEver = _hx_tab_array({[0]="NeverEver",4,__enum__ = __tink_core_FutureStatus},2)


__tink_core_FutureTrigger.new = function() 
  local self = _hx_new(__tink_core_FutureTrigger.prototype)
  __tink_core_FutureTrigger.super(self)
  return self
end
__tink_core_FutureTrigger.super = function(self) 
  self.status = __tink_core_FutureStatus.Awaited;
  self.list = __tink_core_CallbackList.new(true);
end
__tink_core_FutureTrigger.__name__ = true
__tink_core_FutureTrigger.__interfaces__ = {__tink_core__Future_FutureObject}
__tink_core_FutureTrigger.prototype = _hx_e();
__tink_core_FutureTrigger.prototype.getStatus = function(self) 
  do return self.status end
end
__tink_core_FutureTrigger.prototype.handle = function(self,callback) 
  local _g = self.status;
  if (_g[1] == 3) then 
    local result = _g[2];
    __tink_core__Callback_Callback_Impl_.invoke(callback, __tink_core__Lazy_Lazy_Impl_.get(result));
    do return nil end;
  else
    local v = _g;
    local _this = self.list;
    if (_this.disposeHandlers == nil) then 
      do return nil end;
    else
      local node = __tink_core__Callback_ListCell.new(callback, _this);
      _this.cells:push(node);
      local tmp = (function() 
      local _hx_obj = _this;
      local _hx_fld = 'used';
      local _ = _hx_obj[_hx_fld];
      _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
       return _;
       end)() == 0;
      if (tmp) then 
        local fn = _this.onfill;
        if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
          __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
          fn();
          __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
        else
          __tink_core__Callback_Callback_Impl_.defer(fn);
        end;
      end;
      do return node end;
    end;
  end;
end
__tink_core_FutureTrigger.prototype.eager = function(self) 
end
__tink_core_FutureTrigger.prototype.asFuture = function(self) 
  do return self end
end
__tink_core_FutureTrigger.prototype.trigger = function(self,result) 
  local _g = self.status;
  if (_g[1] == 3) then 
    local _g = _g[2];
    do return false end;
  else
    self.status = __tink_core_FutureStatus.Ready(__tink_core__Lazy_LazyConst.new(result));
    self.list:invoke(result);
    do return true end;
  end;
end

__tink_core_FutureTrigger.prototype.__class__ =  __tink_core_FutureTrigger

__tink_core__Future_SuspendableFuture.new = function(wakeup) 
  local self = _hx_new(__tink_core__Future_SuspendableFuture.prototype)
  __tink_core__Future_SuspendableFuture.super(self,wakeup)
  return self
end
__tink_core__Future_SuspendableFuture.super = function(self,wakeup) 
  self.status = __tink_core_FutureStatus.Suspended;
  local _gthis = self;
  self.wakeup = _hx_funcToField(wakeup);
  self.callbacks = __tink_core_CallbackList.new(true);
  self.callbacks.ondrain = function(self) 
    if (_gthis.status == __tink_core_FutureStatus.Awaited) then 
      _gthis.status = __tink_core_FutureStatus.Suspended;
      local this1 = _gthis.link;
      if (this1 ~= nil) then 
        this1:cancel();
      end;
      _gthis.link = nil;
    end;
   end;
  self.callbacks.onfill = function(self) 
    if (_gthis.status == __tink_core_FutureStatus.Suspended) then 
      _gthis.status = __tink_core_FutureStatus.Awaited;
      _gthis:arm();
    end;
   end;
end
__tink_core__Future_SuspendableFuture.__name__ = true
__tink_core__Future_SuspendableFuture.__interfaces__ = {__tink_core__Future_FutureObject}
__tink_core__Future_SuspendableFuture.prototype = _hx_e();
__tink_core__Future_SuspendableFuture.prototype.getStatus = function(self) 
  do return self.status end
end
__tink_core__Future_SuspendableFuture.prototype.trigger = function(self,value) 
  local _g = self.status;
  if (_g[1] == 3) then 
    local _g = _g[2];
  else
    self.status = __tink_core_FutureStatus.Ready(__tink_core__Lazy_LazyConst.new(value));
    local link = self.link;
    self.link = nil;
    self.wakeup = nil;
    self.callbacks:invoke(value);
    if (link ~= nil) then 
      link:cancel();
    end;
  end;
end
__tink_core__Future_SuspendableFuture.prototype.handle = function(self,callback) 
  local _g = self.status;
  if (_g[1] == 3) then 
    local result = _g[2];
    __tink_core__Callback_Callback_Impl_.invoke(callback, __tink_core__Lazy_Lazy_Impl_.get(result));
    do return nil end;
  else
    local _this = self.callbacks;
    if (_this.disposeHandlers == nil) then 
      do return nil end;
    else
      local node = __tink_core__Callback_ListCell.new(callback, _this);
      _this.cells:push(node);
      local tmp = (function() 
      local _hx_obj = _this;
      local _hx_fld = 'used';
      local _ = _hx_obj[_hx_fld];
      _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
       return _;
       end)() == 0;
      if (tmp) then 
        local fn = _this.onfill;
        if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
          __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
          fn();
          __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
        else
          __tink_core__Callback_Callback_Impl_.defer(fn);
        end;
      end;
      do return node end;
    end;
  end;
end
__tink_core__Future_SuspendableFuture.prototype.arm = function(self) 
  local _gthis = self;
  self.link = self:wakeup(function(x) 
    _gthis:trigger(x);
  end);
end
__tink_core__Future_SuspendableFuture.prototype.eager = function(self) 
  local tmp = self.status[1];
  if (tmp) == 0 then 
    self.status = __tink_core_FutureStatus.EagerlyAwaited;
    self:arm();
  elseif (tmp) == 1 then 
    self.status = __tink_core_FutureStatus.EagerlyAwaited;else end;
end

__tink_core__Future_SuspendableFuture.prototype.__class__ =  __tink_core__Future_SuspendableFuture

__tink_core__Lazy_Lazy_Impl_.new = {}
__tink_core__Lazy_Lazy_Impl_.__name__ = true
__tink_core__Lazy_Lazy_Impl_.get_computed = function(this1) 
  do return this1:isComputed() end;
end
__tink_core__Lazy_Lazy_Impl_.get = function(this1) 
  this1:compute();
  do return this1:get() end;
end
__tink_core__Lazy_Lazy_Impl_.fromNoise = function(l) 
  do return l end;
end
__tink_core__Lazy_Lazy_Impl_.ofFunc = function(f) 
  do return __tink_core__Lazy_LazyFunc.new(f) end;
end
__tink_core__Lazy_Lazy_Impl_.map = function(this1,f) 
  do return __tink_core__Lazy_LazyFunc.new(function() 
    do return f(this1:get()) end;
  end, this1) end;
end
__tink_core__Lazy_Lazy_Impl_.flatMap = function(this1,f) 
  do return __tink_core__Lazy_LazyFunc.new(function() 
    do return __tink_core__Lazy_Lazy_Impl_.get(f(this1:get())) end;
  end, this1) end;
end
__tink_core__Lazy_Lazy_Impl_.ofConst = function(c) 
  do return __tink_core__Lazy_LazyConst.new(c) end;
end

__tink_core__Lazy_LazyFunc.new = function(f,from) 
  local self = _hx_new(__tink_core__Lazy_LazyFunc.prototype)
  __tink_core__Lazy_LazyFunc.super(self,f,from)
  return self
end
__tink_core__Lazy_LazyFunc.super = function(self,f,from) 
  self.f = _hx_funcToField(f);
  self.from = from;
end
__tink_core__Lazy_LazyFunc.__name__ = true
__tink_core__Lazy_LazyFunc.__interfaces__ = {__tink_core__Lazy_LazyObject}
__tink_core__Lazy_LazyFunc.prototype = _hx_e();
__tink_core__Lazy_LazyFunc.prototype.underlying = function(self) 
  do return self.from end
end
__tink_core__Lazy_LazyFunc.prototype.isComputed = function(self) 
  do return self.f == nil end
end
__tink_core__Lazy_LazyFunc.prototype.get = function(self) 
  do return self.result end
end
__tink_core__Lazy_LazyFunc.prototype.compute = function(self) 
  local _g = self.f;
  if (_g ~= nil) then 
    local v = _g;
    self.f = nil;
    local _g = self.from;
    if (_g ~= nil) then 
      local cur = _g;
      self.from = nil;
      local stack = _hx_tab_array({}, 0);
      while ((cur ~= nil) and not cur:isComputed()) do 
        stack:push(cur);
        cur = cur:underlying();
      end;
      stack:reverse();
      local _g = 0;
      while (_g < stack.length) do 
        local c = stack[_g];
        _g = _g + 1;
        c:compute();
      end;
    end;
    self.result = v();
  end;
end

__tink_core__Lazy_LazyFunc.prototype.__class__ =  __tink_core__Lazy_LazyFunc

__tink_core__Noise_Noise_Impl_.new = {}
__tink_core__Noise_Noise_Impl_.__name__ = true
__tink_core__Noise_Noise_Impl_.ofAny = function(t) 
  do return nil end;
end

__tink_core_OptionTools.new = {}
__tink_core_OptionTools.__name__ = true
__tink_core_OptionTools.force = function(o,pos) 
  if (o[1] == 0) then 
    local v = o[2];
    do return v end;
  else
    _G.error(__haxe_Exception.thrown(__tink_core_TypedError.new(404, "Some value expected but none found", pos)),0);
  end;
end
__tink_core_OptionTools.sure = function(o,pos) 
  if (o[1] == 0) then 
    local v = o[2];
    do return v end;
  else
    _G.error(__haxe_Exception.thrown(__tink_core_TypedError.new(404, "Some value expected but none found", pos)),0);
  end;
end
__tink_core_OptionTools.toOutcome = function(o,pos) 
  local tmp = o[1];
  if (tmp) == 0 then 
    local value = o[2];
    do return __tink_core_Outcome.Success(value) end;
  elseif (tmp) == 1 then 
    do return __tink_core_Outcome.Failure(__tink_core_TypedError.new(404, Std.string(Std.string(Std.string("Some value expected but none found in ") .. Std.string(pos.fileName)) .. Std.string("@line ")) .. Std.string(pos.lineNumber), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="tink/core/Option.hx",lineNumber=31,className="tink.core.OptionTools",methodName="toOutcome"}))) end; end;
end
__tink_core_OptionTools["or"] = function(o,l) 
  if (o[1] == 0) then 
    local v = o[2];
    do return v end;
  else
    do return __tink_core__Lazy_Lazy_Impl_.get(l) end;
  end;
end
__tink_core_OptionTools.orTry = function(o,fallback) 
  if (o[1] == 0) then 
    local v = o[2];
    do return o end;
  else
    do return __tink_core__Lazy_Lazy_Impl_.get(fallback) end;
  end;
end
__tink_core_OptionTools.orNull = function(o) 
  if (o[1] == 0) then 
    local v = o[2];
    do return v end;
  else
    do return nil end;
  end;
end
__tink_core_OptionTools.filter = function(o,f) 
  if (o[1] == 0) then 
    if (f(o[2]) == false) then 
      do return __haxe_ds_Option.None end;
    else
      do return o end;
    end;
  else
    do return o end;
  end;
end
__tink_core_OptionTools.satisfies = function(o,f) 
  if (o[1] == 0) then 
    local v = o[2];
    do return f(v) end;
  else
    do return false end;
  end;
end
__tink_core_OptionTools.equals = function(o,v) 
  if (o[1] == 0) then 
    local v1 = o[2];
    do return v1 == v end;
  else
    do return false end;
  end;
end
__tink_core_OptionTools.map = function(o,f) 
  if (o[1] == 0) then 
    local v = o[2];
    do return __haxe_ds_Option.Some(f(v)) end;
  else
    do return __haxe_ds_Option.None end;
  end;
end
__tink_core_OptionTools.flatMap = function(o,f) 
  if (o[1] == 0) then 
    local v = o[2];
    do return f(v) end;
  else
    do return __haxe_ds_Option.None end;
  end;
end
__tink_core_OptionTools.iterator = function(o) 
  do return __tink_core_OptionIter.new(o) end;
end
__tink_core_OptionTools.toArray = function(o) 
  if (o[1] == 0) then 
    local v = o[2];
    do return _hx_tab_array({[0]=v}, 1) end;
  else
    do return _hx_tab_array({}, 0) end;
  end;
end

__tink_core_OptionIter.new = function(o) 
  local self = _hx_new(__tink_core_OptionIter.prototype)
  __tink_core_OptionIter.super(self,o)
  return self
end
__tink_core_OptionIter.super = function(self,o) 
  self.alive = true;
  if (o[1] == 0) then 
    local v = o[2];
    self.value = v;
  else
    self.alive = false;
  end;
end
__tink_core_OptionIter.__name__ = true
__tink_core_OptionIter.prototype = _hx_e();
__tink_core_OptionIter.prototype.hasNext = function(self) 
  do return self.alive end
end
__tink_core_OptionIter.prototype.next = function(self) 
  self.alive = false;
  do return self.value end
end

__tink_core_OptionIter.prototype.__class__ =  __tink_core_OptionIter
_hxClasses["tink.core.Outcome"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Success","Failure"},2)}
__tink_core_Outcome = _hxClasses["tink.core.Outcome"];
__tink_core_Outcome.Success = function(data) local _x = _hx_tab_array({[0]="Success",0,data,__enum__=__tink_core_Outcome}, 3); return _x; end 
__tink_core_Outcome.Failure = function(failure) local _x = _hx_tab_array({[0]="Failure",1,failure,__enum__=__tink_core_Outcome}, 3); return _x; end 

__tink_core_OutcomeTools.new = {}
__tink_core_OutcomeTools.__name__ = true
__tink_core_OutcomeTools.sure = function(outcome) 
  local tmp = outcome[1];
  if (tmp) == 0 then 
    local data = outcome[2];
    do return data end;
  elseif (tmp) == 1 then 
    local failure = outcome[2];
    local _g = __tink_core_TypedError.asError(failure);
    if (_g == nil) then 
      _G.error(__haxe_Exception.thrown(failure),0);
    else
      local e = _g;
      do return e:throwSelf() end;
    end; end;
end
__tink_core_OutcomeTools.toOption = function(outcome) 
  local tmp = outcome[1];
  if (tmp) == 0 then 
    local data = outcome[2];
    do return __haxe_ds_Option.Some(data) end;
  elseif (tmp) == 1 then 
    local _g = outcome[2];
    do return __haxe_ds_Option.None end; end;
end
__tink_core_OutcomeTools.orNull = function(outcome) 
  local tmp = outcome[1];
  if (tmp) == 0 then 
    local data = outcome[2];
    do return data end;
  elseif (tmp) == 1 then 
    local _g = outcome[2];
    do return nil end; end;
end
__tink_core_OutcomeTools.orUse = function(outcome,fallback) 
  do return __tink_core_OutcomeTools["or"](outcome, fallback) end;
end
__tink_core_OutcomeTools["or"] = function(outcome,fallback) 
  local tmp = outcome[1];
  if (tmp) == 0 then 
    local data = outcome[2];
    do return data end;
  elseif (tmp) == 1 then 
    local _g = outcome[2];
    do return __tink_core__Lazy_Lazy_Impl_.get(fallback) end; end;
end
__tink_core_OutcomeTools.orTry = function(outcome,fallback) 
  local tmp = outcome[1];
  if (tmp) == 0 then 
    local _g = outcome[2];
    do return outcome end;
  elseif (tmp) == 1 then 
    local _g = outcome[2];
    do return __tink_core__Lazy_Lazy_Impl_.get(fallback) end; end;
end
__tink_core_OutcomeTools.equals = function(outcome,to) 
  local tmp = outcome[1];
  if (tmp) == 0 then 
    local data = outcome[2];
    do return data == to end;
  elseif (tmp) == 1 then 
    local _g = outcome[2];
    do return false end; end;
end
__tink_core_OutcomeTools.map = function(outcome,transform) 
  local tmp = outcome[1];
  if (tmp) == 0 then 
    local a = outcome[2];
    do return __tink_core_Outcome.Success(transform(a)) end;
  elseif (tmp) == 1 then 
    local f = outcome[2];
    do return __tink_core_Outcome.Failure(f) end; end;
end
__tink_core_OutcomeTools.isSuccess = function(outcome) 
  if (outcome[1] == 0) then 
    local _g = outcome[2];
    do return true end;
  else
    do return false end;
  end;
end
__tink_core_OutcomeTools.flatMap = function(o,mapper) 
  do return __tink_core__Outcome_OutcomeMapper_Impl_.apply(mapper, o) end;
end
__tink_core_OutcomeTools.swap = function(outcome,v) 
  local tmp = outcome[1];
  if (tmp) == 0 then 
    local a = outcome[2];
    do return __tink_core_Outcome.Success(v) end;
  elseif (tmp) == 1 then 
    local f = outcome[2];
    do return __tink_core_Outcome.Failure(f) end; end;
end
__tink_core_OutcomeTools.next = function(outcome,f) 
  local tmp = outcome[1];
  if (tmp) == 0 then 
    local v = outcome[2];
    do return f(v) end;
  elseif (tmp) == 1 then 
    local e = outcome[2];
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Failure(e))) end; end;
end
__tink_core_OutcomeTools.attempt = function(f,report) 
  local _hx_status, _hx_result = pcall(function() 
  
      do return __tink_core_Outcome.Success(f()) end;
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    local e = __haxe_Exception.caught(_g):unwrap();
    do return __tink_core_Outcome.Failure(report(e)) end;
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
end
__tink_core_OutcomeTools.flatten = function(o) 
  local tmp = o[1];
  if (tmp) == 0 then 
    local _g = o[2];
    local tmp = _g[1];
    if (tmp) == 0 then 
      local d = _g[2];
      do return __tink_core_Outcome.Success(d) end;
    elseif (tmp) == 1 then 
      local f = _g[2];
      do return __tink_core_Outcome.Failure(f) end; end;
  elseif (tmp) == 1 then 
    local f = o[2];
    do return __tink_core_Outcome.Failure(f) end; end;
end

__tink_core__Outcome_OutcomeMapper_Impl_.new = {}
__tink_core__Outcome_OutcomeMapper_Impl_.__name__ = true
__tink_core__Outcome_OutcomeMapper_Impl_._new = function(f) 
  local this1 = _hx_o({__fields__={f=true},f=function(_,...) return f(...) end});
  do return this1 end;
end
__tink_core__Outcome_OutcomeMapper_Impl_.apply = function(this1,o) 
  do return this1:f(o) end;
end
__tink_core__Outcome_OutcomeMapper_Impl_.withSameError = function(f) 
  do return __tink_core__Outcome_OutcomeMapper_Impl_._new(function(o) 
    local tmp = o[1];
    if (tmp) == 0 then 
      local d = o[2];
      do return f(d) end;
    elseif (tmp) == 1 then 
      local f = o[2];
      do return __tink_core_Outcome.Failure(f) end; end;
  end) end;
end
__tink_core__Outcome_OutcomeMapper_Impl_.withEitherError = function(f) 
  do return __tink_core__Outcome_OutcomeMapper_Impl_._new(function(o) 
    local tmp = o[1];
    if (tmp) == 0 then 
      local d = o[2];
      local _g = f(d);
      local tmp = _g[1];
      if (tmp) == 0 then 
        local d = _g[2];
        do return __tink_core_Outcome.Success(d) end;
      elseif (tmp) == 1 then 
        local f = _g[2];
        do return __tink_core_Outcome.Failure(__haxe_ds_Either.Right(f)) end; end;
    elseif (tmp) == 1 then 
      local f = o[2];
      do return __tink_core_Outcome.Failure(__haxe_ds_Either.Left(f)) end; end;
  end) end;
end

__tink_core__Pair_Pair_Impl_.new = {}
__tink_core__Pair_Pair_Impl_.__name__ = true
__tink_core__Pair_Pair_Impl_._new = function(a,b) 
  local this1 = __tink_core_MPair.new(a, b);
  do return this1 end;
end
__tink_core__Pair_Pair_Impl_.get_a = function(this1) 
  do return this1.a end;
end
__tink_core__Pair_Pair_Impl_.get_b = function(this1) 
  do return this1.b end;
end
__tink_core__Pair_Pair_Impl_.toBool = function(this1) 
  do return this1 ~= nil end;
end
__tink_core__Pair_Pair_Impl_.isNil = function(this1) 
  do return this1 == nil end;
end
__tink_core__Pair_Pair_Impl_["nil"] = function() 
  do return nil end;
end

__tink_core_MPair.new = function(a,b) 
  local self = _hx_new(__tink_core_MPair.prototype)
  __tink_core_MPair.super(self,a,b)
  return self
end
__tink_core_MPair.super = function(self,a,b) 
  self.a = a;
  self.b = b;
end
__tink_core_MPair.__name__ = true
__tink_core_MPair.prototype = _hx_e();

__tink_core_MPair.prototype.__class__ =  __tink_core_MPair

__tink_core__Promise_Promise_Impl_.new = {}
__tink_core__Promise_Promise_Impl_.__name__ = true
__tink_core__Promise_Promise_Impl_._new = function(f) 
  local this1 = __tink_core__Future_SuspendableFuture.new(function(cb) 
    do return f(function(v) 
      cb(__tink_core_Outcome.Success(v));
    end, function(e) 
      cb(__tink_core_Outcome.Failure(e));
    end) end;
  end);
  local this1 = this1;
  do return this1 end;
end
__tink_core__Promise_Promise_Impl_.eager = function(this1) 
  this1:eager();
  do return this1 end;
end
__tink_core__Promise_Promise_Impl_.map = function(this1,f) 
  do return __tink_core__Future_Future_Impl_.map(this1, f) end;
end
__tink_core__Promise_Promise_Impl_.flatMap = function(this1,f) 
  do return __tink_core__Future_Future_Impl_.flatMap(this1, f) end;
end
__tink_core__Promise_Promise_Impl_.tryRecover = function(this1,f) 
  do return __tink_core__Future_Future_Impl_.flatMap(this1, function(o) 
    local tmp = o[1];
    if (tmp) == 0 then 
      local d = o[2];
      do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(o)) end;
    elseif (tmp) == 1 then 
      local e = o[2];
      do return f(e) end; end;
  end) end;
end
__tink_core__Promise_Promise_Impl_.recover = function(this1,f) 
  do return __tink_core__Future_Future_Impl_.flatMap(this1, function(o) 
    local tmp = o[1];
    if (tmp) == 0 then 
      local d = o[2];
      do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(d)) end;
    elseif (tmp) == 1 then 
      local e = o[2];
      do return f(e) end; end;
  end) end;
end
__tink_core__Promise_Promise_Impl_.mapError = function(this1,f) 
  do return __tink_core__Future_Future_Impl_.map(this1, function(o) 
    local tmp = o[1];
    if (tmp) == 0 then 
      local _g = o[2];
      do return o end;
    elseif (tmp) == 1 then 
      local e = o[2];
      do return __tink_core_Outcome.Failure(f(e)) end; end;
  end) end;
end
__tink_core__Promise_Promise_Impl_.handle = function(this1,cb) 
  do return this1:handle(cb) end;
end
__tink_core__Promise_Promise_Impl_.noise = function(this1) 
  if (this1:getStatus()[1] == 4) then 
    do return __tink_core__Promise_Promise_Impl_.NEVER end;
  else
    do return __tink_core__Promise_Promise_Impl_.next(this1, function(v) 
      do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Success(nil))) end;
    end) end;
  end;
end
__tink_core__Promise_Promise_Impl_.isSuccess = function(this1) 
  do return __tink_core__Future_Future_Impl_.map(this1, function(o) 
    do return __tink_core_OutcomeTools.isSuccess(o) end;
  end) end;
end
__tink_core__Promise_Promise_Impl_.next = function(this1,f,gather) 
  do return __tink_core__Future_Future_Impl_.flatMap(this1, function(o) 
    local tmp = o[1];
    if (tmp) == 0 then 
      local d = o[2];
      do return f(d) end;
    elseif (tmp) == 1 then 
      local f = o[2];
      do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Failure(f))) end; end;
  end) end;
end
__tink_core__Promise_Promise_Impl_.swap = function(this1,v) 
  do return __tink_core__Promise_Promise_Impl_.next(this1, function(_) 
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Success(v))) end;
  end) end;
end
__tink_core__Promise_Promise_Impl_.swapError = function(this1,e) 
  do return __tink_core__Promise_Promise_Impl_.mapError(this1, function(_) 
    do return e end;
  end) end;
end
__tink_core__Promise_Promise_Impl_.merge = function(this1,other,merger,gather) 
  do return __tink_core__Future_Future_Impl_.flatMap(__tink_core__Future_Future_Impl_.merge(this1, other, function(a,b) 
    local tmp = a[1];
    if (tmp) == 0 then 
      local _g = a[2];
      local tmp = b[1];
      if (tmp) == 0 then 
        local b = b[2];
        local a = _g;
        do return merger(a, b) end;
      elseif (tmp) == 1 then 
        local e = b[2];
        do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Failure(e))) end; end;
    elseif (tmp) == 1 then 
      local e = a[2];
      do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Failure(e))) end; end;
  end), function(o) 
    do return o end;
  end) end;
end
__tink_core__Promise_Promise_Impl_["and"] = function(a,b) 
  do return __tink_core__Promise_Promise_Impl_.merge(a, b, function(a,b) 
    local this1 = __tink_core_MPair.new(a, b);
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Success(this1))) end;
  end) end;
end
__tink_core__Promise_Promise_Impl_.iterate = function(promises,yield,fallback) 
  do return __tink_core__Future_Future_Impl_.irreversible(function(cb) 
    local iter = promises:iterator();
    local next = nil;
    next = function() 
      if (iter:hasNext()) then 
        iter:next():handle(function(o) 
          local next1 = o[1];
          if (next1) == 0 then 
            local v = o[2];
            yield(v):handle(function(o) 
              local next1 = o[1];
              if (next1) == 0 then 
                local _g = o[2];
                local next1 = _g[1];
                if (next1) == 0 then 
                  local ret = _g[2];
                  cb(__tink_core_Outcome.Success(ret));
                elseif (next1) == 1 then 
                  next(); end;
              elseif (next1) == 1 then 
                local e = o[2];
                cb(__tink_core_Outcome.Failure(e)); end;
            end);
          elseif (next1) == 1 then 
            local e = o[2];
            cb(__tink_core_Outcome.Failure(e)); end;
        end);
      else
        fallback:handle(cb);
      end;
    end;
    next();
  end) end;
end
__tink_core__Promise_Promise_Impl_.retry = function(gen,next) 
  local stamp = function() 
    do return Sys.time() * 1000 end;
  end;
  local start = stamp();
  local attempt = nil;
  attempt = function(count) 
    local f = function(error) 
      do return __tink_core__Promise_Promise_Impl_.next(next(_hx_o({__fields__={attempt=true,error=true,elapsed=true},attempt=count,error=error,elapsed=stamp() - start})), function(_) 
        do return attempt(count + 1) end;
      end) end;
    end;
    do return __tink_core__Future_Future_Impl_.flatMap(gen(), function(o) 
      local attempt = o[1];
      if (attempt) == 0 then 
        local d = o[2];
        do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(o)) end;
      elseif (attempt) == 1 then 
        local e = o[2];
        do return f(e) end; end;
    end) end;
  end;
  do return attempt(1) end;
end
__tink_core__Promise_Promise_Impl_.ofSpecific = function(s) 
  do return s end;
end
__tink_core__Promise_Promise_Impl_.fromNever = function(l) 
  do return l end;
end
__tink_core__Promise_Promise_Impl_.ofTrigger = function(f) 
  do return f end;
end
__tink_core__Promise_Promise_Impl_.ofHappyTrigger = function(f) 
  do return __tink_core__Future_Future_Impl_.map(f, __tink_core_Outcome.Success) end;
end
__tink_core__Promise_Promise_Impl_.ofFuture = function(f) 
  do return __tink_core__Future_Future_Impl_.map(f, __tink_core_Outcome.Success) end;
end
__tink_core__Promise_Promise_Impl_.ofOutcome = function(o) 
  do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(o)) end;
end
__tink_core__Promise_Promise_Impl_.ofError = function(e) 
  do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Failure(e))) end;
end
__tink_core__Promise_Promise_Impl_.ofData = function(d) 
  do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Success(d))) end;
end
__tink_core__Promise_Promise_Impl_.lazy = function(p) 
  local this1 = __tink_core__Future_SuspendableFuture.new(function(cb) 
    do return __tink_core__Lazy_Lazy_Impl_.get(p):handle(cb) end;
  end);
  do return this1 end;
end
__tink_core__Promise_Promise_Impl_.inParallel = function(a,concurrency) 
  do return __tink_core__Promise_Promise_Impl_.many(a, concurrency) end;
end
__tink_core__Promise_Promise_Impl_.many = function(a,concurrency) 
  do return __tink_core__Future_Future_Impl_.processMany(a, concurrency, function(o) 
    do return o end;
  end, function(o) 
    do return o end;
  end) end;
end
__tink_core__Promise_Promise_Impl_.inSequence = function(a) 
  do return __tink_core__Promise_Promise_Impl_.many(a, 1) end;
end
__tink_core__Promise_Promise_Impl_.cache = function(gen) 
  local p = nil;
  do return function() 
    local ret = p;
    if (ret == nil) then 
      local sync = false;
      ret = __tink_core__Promise_Promise_Impl_.next(gen(), function(o) 
        o.b:handle(function(_) 
          sync = true;
          p = nil;
        end);
        do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Success(o.a))) end;
      end);
      if (not sync) then 
        p = ret;
      end;
    end;
    do return __tink_core__Future_Future_Impl_.map(ret, function(o) 
      if (not __tink_core_OutcomeTools.isSuccess(o)) then 
        p = nil;
      end;
      do return o end;
    end) end;
  end end;
end
__tink_core__Promise_Promise_Impl_.lift = function(p) 
  do return p end;
end
__tink_core__Promise_Promise_Impl_.trigger = function() 
  local this1 = __tink_core_FutureTrigger.new();
  do return this1 end;
end
__tink_core__Promise_Promise_Impl_.resolve = function(v) 
  do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Success(v))) end;
end
__tink_core__Promise_Promise_Impl_.reject = function(e) 
  do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Failure(e))) end;
end

__tink_core__Promise_Next_Impl_.new = {}
__tink_core__Promise_Next_Impl_.__name__ = true
__tink_core__Promise_Next_Impl_.ofSafe = function(f) 
  do return function(x) 
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(f(x))) end;
  end end;
end
__tink_core__Promise_Next_Impl_.ofSync = function(f) 
  do return function(x) 
    do return __tink_core__Future_Future_Impl_.map(f(x), __tink_core_Outcome.Success) end;
  end end;
end
__tink_core__Promise_Next_Impl_.ofSafeSync = function(f) 
  do return function(x) 
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Success(f(x)))) end;
  end end;
end
__tink_core__Promise_Next_Impl_._chain = function(a,b) 
  do return function(v) 
    do return __tink_core__Promise_Promise_Impl_.next(a(v), b) end;
  end end;
end

__tink_core__Promise_Recover_Impl_.new = {}
__tink_core__Promise_Recover_Impl_.__name__ = true
__tink_core__Promise_Recover_Impl_.ofSync = function(f) 
  do return function(e) 
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(f(e))) end;
  end end;
end

__tink_core__Promise_Combiner_Impl_.new = {}
__tink_core__Promise_Combiner_Impl_.__name__ = true
__tink_core__Promise_Combiner_Impl_.ofSync = function(f) 
  do return function(x1,x2) 
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(f(x1, x2))) end;
  end end;
end
__tink_core__Promise_Combiner_Impl_.ofSafe = function(f) 
  do return function(x1,x2) 
    do return __tink_core__Future_Future_Impl_.map(f(x1, x2), __tink_core_Outcome.Success) end;
  end end;
end
__tink_core__Promise_Combiner_Impl_.ofSafeSync = function(f) 
  do return function(x1,x2) 
    do return __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Success(f(x1, x2)))) end;
  end end;
end

__tink_core__Promise_PromiseTrigger_Impl_.new = {}
__tink_core__Promise_PromiseTrigger_Impl_.__name__ = true
__tink_core__Promise_PromiseTrigger_Impl_._new = function() 
  local this1 = __tink_core_FutureTrigger.new();
  do return this1 end;
end
__tink_core__Promise_PromiseTrigger_Impl_.resolve = function(this1,v) 
  do return this1:trigger(__tink_core_Outcome.Success(v)) end;
end
__tink_core__Promise_PromiseTrigger_Impl_.reject = function(this1,e) 
  do return this1:trigger(__tink_core_Outcome.Failure(e)) end;
end
__tink_core__Promise_PromiseTrigger_Impl_.asPromise = function(this1) 
  do return this1 end;
end

__tink_core__Signal_Gather_Impl_.new = {}
__tink_core__Signal_Gather_Impl_.__name__ = true
__tink_core__Signal_Gather_Impl_._new = function(v) 
  local this1 = v;
  do return this1 end;
end
__tink_core__Signal_Gather_Impl_.ofBool = function(b) 
  local this1 = b;
  do return this1 end;
end

__tink_core__Signal_Signal_Impl_.new = {}
__tink_core__Signal_Signal_Impl_.__name__ = true
__tink_core__Signal_Signal_Impl_._new = function(f,init) 
  local this1 = __tink_core__Signal_Suspendable.new(f, init);
  do return this1 end;
end
__tink_core__Signal_Signal_Impl_.handle = function(this1,handler) 
  do return this1:listen(handler) end;
end
__tink_core__Signal_Signal_Impl_.map = function(this1,f,gather) 
  do return __tink_core__Signal_Suspendable.over(this1, function(fire) 
    do return this1:listen(function(v) 
      fire(f(v));
    end) end;
  end) end;
end
__tink_core__Signal_Signal_Impl_.flatMap = function(this1,f,gather) 
  do return __tink_core__Signal_Suspendable.over(this1, function(fire) 
    do return this1:listen(function(v) 
      f(v):handle(fire);
    end) end;
  end) end;
end
__tink_core__Signal_Signal_Impl_.filter = function(this1,f,gather) 
  do return __tink_core__Signal_Suspendable.over(this1, function(fire) 
    do return this1:listen(function(v) 
      if (f(v)) then 
        fire(v);
      end;
    end) end;
  end) end;
end
__tink_core__Signal_Signal_Impl_.select = function(this1,selector,gather) 
  do return __tink_core__Signal_Suspendable.over(this1, function(fire) 
    do return this1:listen(function(v) 
      local _g = selector(v);
      if (_g[1] == 0) then 
        local v = _g[2];
        fire(v);
      end;
    end) end;
  end) end;
end
__tink_core__Signal_Signal_Impl_.join = function(this1,that,gather) 
  if (this1:get_disposed()) then 
    do return that end;
  else
    if (that:get_disposed()) then 
      do return this1 end;
    else
      do return __tink_core__Signal_Suspendable.new(function(fire) 
        local cb = fire;
        do return __tink_core__Callback_LinkPair.new(this1:listen(cb), that:listen(cb)) end;
      end, function(_self) 
        local release = function() 
          if (this1:get_disposed() and that:get_disposed()) then 
            _self:dispose();
          end;
        end;
        this1:ondispose(release);
        that:ondispose(release);
      end) end;
    end;
  end;
end
__tink_core__Signal_Signal_Impl_.nextTime = function(this1,condition) 
  do return __tink_core__Signal_Signal_Impl_.pickNext(this1, function(v) 
    if ((condition == nil) or condition(v)) then 
      do return __haxe_ds_Option.Some(v) end;
    else
      do return __haxe_ds_Option.None end;
    end;
  end) end;
end
__tink_core__Signal_Signal_Impl_.pickNext = function(this1,selector) 
  local ret = __tink_core_FutureTrigger.new();
  local link = nil;
  link = this1:listen(function(v) 
    local _g = selector(v);
    local link = _g[1];
    if (link) == 0 then 
      local v = _g[2];
      ret:trigger(v);
    elseif (link) == 1 then  end;
  end);
  local tmp;
  if (link == nil) then 
    tmp = function(_) 
      __tink_core__Callback_CallbackLink_Impl_.noop();
    end;
  else
    local f = (function() local __=link; return _hx_bind(__,__.cancel) end)();
    tmp = function(_) 
      f();
    end;
  end;
  ret:handle(tmp);
  do return ret end;
end
__tink_core__Signal_Signal_Impl_["until"] = function(this1,_end) 
  do return __tink_core__Signal_Suspendable.new(function(yield) 
    do return this1:listen(yield) end;
  end, function(_self) 
    local f = _hx_bind(_self,_self.dispose);
    local tmp = function(_) 
      f();
    end;
    _end:handle(tmp);
  end) end;
end
__tink_core__Signal_Signal_Impl_.next = function(this1,condition) 
  do return __tink_core__Signal_Signal_Impl_.nextTime(this1, condition) end;
end
__tink_core__Signal_Signal_Impl_.noise = function(this1) 
  do return __tink_core__Signal_Signal_Impl_.map(this1, function(_) 
    do return nil end;
  end) end;
end
__tink_core__Signal_Signal_Impl_.gather = function(this1) 
  do return this1 end;
end
__tink_core__Signal_Signal_Impl_.create = function(f) 
  local init = nil;
  local this1 = __tink_core__Signal_Suspendable.new(f, init);
  do return this1 end;
end
__tink_core__Signal_Signal_Impl_.generate = function(generator,init) 
  local this1 = __tink_core__Signal_Suspendable.new(function(fire) 
    generator(fire);
    do return nil end;
  end, init);
  do return this1 end;
end
__tink_core__Signal_Signal_Impl_.trigger = function() 
  do return __tink_core_SignalTrigger.new() end;
end
__tink_core__Signal_Signal_Impl_.ofClassical = function(add,remove,gather) 
  do return __tink_core__Signal_Suspendable.new(function(fire) 
    add(fire);
    local _g = remove;
    local a1 = fire;
    local this1 = __tink_core_SimpleLink.new(function() 
      _g(a1);
    end);
    do return this1 end;
  end) end;
end
__tink_core__Signal_Signal_Impl_.dead = function() 
  do return __tink_core__Signal_Disposed.INST end;
end

__tink_core__Signal_SignalObject.new = {}
__tink_core__Signal_SignalObject.__name__ = true
__tink_core__Signal_SignalObject.__interfaces__ = {__tink_core_Disposable}
__tink_core__Signal_SignalObject.prototype = _hx_e();

__tink_core__Signal_SignalObject.prototype.__class__ =  __tink_core__Signal_SignalObject

__tink_core__Signal_Disposed.new = function() 
  local self = _hx_new(__tink_core__Signal_Disposed.prototype)
  __tink_core__Signal_Disposed.super(self)
  return self
end
__tink_core__Signal_Disposed.super = function(self) 
  __tink_core_AlreadyDisposed.super(self);
end
__tink_core__Signal_Disposed.__name__ = true
__tink_core__Signal_Disposed.__interfaces__ = {__tink_core__Signal_SignalObject}
__tink_core__Signal_Disposed.prototype = _hx_e();
__tink_core__Signal_Disposed.prototype.listen = function(self,cb) 
  do return nil end
end

__tink_core__Signal_Disposed.prototype.__class__ =  __tink_core__Signal_Disposed
__tink_core__Signal_Disposed.__super__ = __tink_core_AlreadyDisposed
setmetatable(__tink_core__Signal_Disposed.prototype,{__index=__tink_core_AlreadyDisposed.prototype})

__tink_core__Signal_Suspendable.new = function(activate,init) 
  local self = _hx_new(__tink_core__Signal_Suspendable.prototype)
  __tink_core__Signal_Suspendable.super(self,activate,init)
  return self
end
__tink_core__Signal_Suspendable.super = function(self,activate,init) 
  self.handlers = __tink_core_CallbackList.new();
  local _gthis = self;
  self.activate = _hx_funcToField(activate);
  self.init = _hx_funcToField(init);
  self.handlers.ondrain = function(self) 
    local this1 = _gthis.subscription;
    if (this1 ~= nil) then 
      this1:cancel();
    end;
   end;
  self.handlers.onfill = function(self) 
    if (init ~= nil) then 
      local f = init;
      init = nil;
      f(_gthis);
    end;
    _gthis.subscription = activate(_hx_bind(_gthis.handlers,_gthis.handlers.invoke));
   end;
end
__tink_core__Signal_Suspendable.__name__ = true
__tink_core__Signal_Suspendable.__interfaces__ = {__tink_core_OwnedDisposable,__tink_core__Signal_SignalObject}
__tink_core__Signal_Suspendable.over = function(s,activate) 
  if (s:get_disposed()) then 
    do return __tink_core__Signal_Signal_Impl_.dead() end;
  else
    local ret = __tink_core__Signal_Suspendable.new(activate);
    s:ondispose(_hx_bind(ret,ret.dispose));
    do return ret end;
  end;
end
__tink_core__Signal_Suspendable.prototype = _hx_e();
__tink_core__Signal_Suspendable.prototype.get_disposed = function(self) 
  do return self.handlers.disposeHandlers == nil end
end
__tink_core__Signal_Suspendable.prototype.dispose = function(self) 
  self.handlers:dispose();
end
__tink_core__Signal_Suspendable.prototype.ondispose = function(self,handler) 
  self.handlers:ondispose(handler);
end
__tink_core__Signal_Suspendable.prototype.listen = function(self,cb) 
  local _this = self.handlers;
  if (_this.disposeHandlers == nil) then 
    do return nil end;
  else
    local node = __tink_core__Callback_ListCell.new(cb, _this);
    _this.cells:push(node);
    local tmp = (function() 
    local _hx_obj = _this;
    local _hx_fld = 'used';
    local _ = _hx_obj[_hx_fld];
    _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
     return _;
     end)() == 0;
    if (tmp) then 
      local fn = _this.onfill;
      if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
        __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
        fn();
        __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
      else
        __tink_core__Callback_Callback_Impl_.defer(fn);
      end;
    end;
    do return node end;
  end;
end

__tink_core__Signal_Suspendable.prototype.__class__ =  __tink_core__Signal_Suspendable

__tink_core_SignalTrigger.new = function() 
  local self = _hx_new(__tink_core_SignalTrigger.prototype)
  __tink_core_SignalTrigger.super(self)
  return self
end
__tink_core_SignalTrigger.super = function(self) 
  self.handlers = __tink_core_CallbackList.new();
end
__tink_core_SignalTrigger.__name__ = true
__tink_core_SignalTrigger.__interfaces__ = {__tink_core_OwnedDisposable,__tink_core__Signal_SignalObject}
__tink_core_SignalTrigger.prototype = _hx_e();
__tink_core_SignalTrigger.prototype.get_disposed = function(self) 
  do return self.handlers.disposeHandlers == nil end
end
__tink_core_SignalTrigger.prototype.dispose = function(self) 
  self.handlers:dispose();
end
__tink_core_SignalTrigger.prototype.ondispose = function(self,d) 
  self.handlers:ondispose(d);
end
__tink_core_SignalTrigger.prototype.trigger = function(self,event) 
  self.handlers:invoke(event);
end
__tink_core_SignalTrigger.prototype.getLength = function(self) 
  do return self.handlers.used end
end
__tink_core_SignalTrigger.prototype.listen = function(self,cb) 
  local _this = self.handlers;
  if (_this.disposeHandlers == nil) then 
    do return nil end;
  else
    local node = __tink_core__Callback_ListCell.new(cb, _this);
    _this.cells:push(node);
    local tmp = (function() 
    local _hx_obj = _this;
    local _hx_fld = 'used';
    local _ = _hx_obj[_hx_fld];
    _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
     return _;
     end)() == 0;
    if (tmp) then 
      local fn = _this.onfill;
      if (__tink_core__Callback_Callback_Impl_.depth < 500) then 
        __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth + 1;
        fn();
        __tink_core__Callback_Callback_Impl_.depth = __tink_core__Callback_Callback_Impl_.depth - 1;
      else
        __tink_core__Callback_Callback_Impl_.defer(fn);
      end;
    end;
    do return node end;
  end;
end
__tink_core_SignalTrigger.prototype.clear = function(self) 
  self.handlers:clear();
end
__tink_core_SignalTrigger.prototype.asSignal = function(self) 
  do return self end
end

__tink_core_SignalTrigger.prototype.__class__ =  __tink_core_SignalTrigger
-- require this for lua 5.1
pcall(require, 'bit')
if bit then
  _hx_bit_raw = bit
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
else
  _hx_bit_raw = _G.require('bit32')
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  -- lua 5.2 weirdness
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
end
-- see https://github.com/HaxeFoundation/haxe/issues/8849
_hx_bit.bor = function(...) return _hx_bit_clamp(_hx_bit_raw.bor(...)) end;
_hx_bit.band = function(...) return _hx_bit_clamp(_hx_bit_raw.band(...)) end;
_hx_bit.arshift = function(...) return _hx_bit_clamp(_hx_bit_raw.arshift(...)) end;

if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  
  if (__lua_lib_lrexlib_Rex == nil) then 
    _G.error(__haxe_Exception.thrown("Rex is missing.  Please install lrexlib-pcre."),0);
  end;
  String.__name__ = true;
  Array.__name__ = true;EReg.FLAGS = __lua_lib_lrexlib_Rex.flags();
  
  Pokedex.baseEndPoint = "https://pokeapi.co/api/v2/";
  
  __haxe_EntryPoint.pending = Array.new();
  
  __haxe_EntryPoint.threadCount = 0;
  
  __haxe_ds_StringMap.tnull = ({});
  
  __lua_Boot.MAXSTACKSIZE = 1000;
  
  __tink_core__Callback_Callback_Impl_.depth = 0;
  
  __tink_core__Callback_Callback_Impl_.MAX_DEPTH = 500;
  
  __tink_core_AlreadyDisposed.INST = __tink_core_AlreadyDisposed.new();
  
  __tink_core__Future_Future_Impl_.NOISE = __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(nil));
  
  __tink_core__Future_Future_Impl_.NULL = __tink_core__Future_Future_Impl_.NOISE;
  
  __tink_core__Future_Future_Impl_.NEVER = __tink_core__Future_NeverFuture.new();
  
  __tink_core__Lazy_Lazy_Impl_.NOISE = (function() 
    local _hx_1
    
    local c = nil;
    
    _hx_1 = __tink_core__Lazy_LazyConst.new(c);
    return _hx_1
  end )();
  
  __tink_core__Lazy_Lazy_Impl_.NULL = __tink_core__Lazy_Lazy_Impl_.NOISE;
  
  __tink_core__Noise_Noise_Impl_.Noise = nil;
  
  __tink_core__Promise_Promise_Impl_.NOISE = __tink_core__Future_SyncFuture.new(__tink_core__Lazy_LazyConst.new(__tink_core_Outcome.Success(nil)));
  
  __tink_core__Promise_Promise_Impl_.NULL = __tink_core__Promise_Promise_Impl_.NOISE;
  
  __tink_core__Promise_Promise_Impl_.NEVER = __tink_core__Future_Future_Impl_.NEVER;
  
  __tink_core__Signal_Disposed.INST = __tink_core__Signal_Disposed.new();
  
  
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_G.math.randomseed(_G.os.time());

_hx_print = print or (function() end)

_hx_box_mr = function(x,nt)
    res = _hx_o({__fields__={}})
    for i,v in ipairs(nt) do
      res[v] = x[i]
    end
    return res
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_static_init();
_G.xpcall(function() 
  ___Main_Main_Fields_.main();
  __haxe_EntryPoint.run();
end, _hx_error)
